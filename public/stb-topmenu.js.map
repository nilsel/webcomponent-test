{"version":3,"file":"stb-topmenu.js","sources":["../node_modules/@polymer/polymer/lib/utils/boot.js","../node_modules/@polymer/polymer/lib/utils/resolve-url.js","../node_modules/@polymer/polymer/lib/utils/settings.js","../node_modules/@polymer/polymer/lib/utils/mixin.js","../node_modules/@polymer/polymer/lib/utils/style-gather.js","../node_modules/@polymer/polymer/lib/elements/dom-module.js","../node_modules/@polymer/polymer/lib/utils/path.js","../node_modules/@polymer/polymer/lib/utils/case-map.js","../node_modules/@polymer/polymer/lib/utils/async.js","../node_modules/@polymer/polymer/lib/mixins/properties-changed.js","../node_modules/@polymer/polymer/lib/mixins/property-accessors.js","../node_modules/@polymer/polymer/lib/mixins/template-stamp.js","../node_modules/@polymer/polymer/lib/mixins/property-effects.js","../node_modules/@polymer/polymer/lib/mixins/properties-mixin.js","../node_modules/@polymer/polymer/lib/mixins/element-mixin.js","../node_modules/@polymer/polymer/lib/utils/html-tag.js","../node_modules/@polymer/polymer/polymer-element.js","../stb-topmenu.js"],"sourcesContent":["/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\nwindow.JSCompiler_renameProperty = function(prop) { return prop; };\n","/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\nimport './boot.js';\n\nlet CSS_URL_RX = /(url\\()([^)]*)(\\))/g;\nlet ABS_URL = /(^\\/)|(^#)|(^[\\w-\\d]*:)/;\nlet workingURL;\nlet resolveDoc;\n/**\n * Resolves the given URL against the provided `baseUri'.\n *\n * Note that this function performs no resolution for URLs that start\n * with `/` (absolute URLs) or `#` (hash identifiers).  For general purpose\n * URL resolution, use `window.URL`.\n *\n * @param {string} url Input URL to resolve\n * @param {?string=} baseURI Base URI to resolve the URL against\n * @return {string} resolved URL\n */\nexport function resolveUrl(url, baseURI) {\n  if (url && ABS_URL.test(url)) {\n    return url;\n  }\n  // Lazy feature detection.\n  if (workingURL === undefined) {\n    workingURL = false;\n    try {\n      const u = new URL('b', 'http://a');\n      u.pathname = 'c%20d';\n      workingURL = (u.href === 'http://a/c%20d');\n    } catch (e) {\n      // silently fail\n    }\n  }\n  if (!baseURI) {\n    baseURI = document.baseURI || window.location.href;\n  }\n  if (workingURL) {\n    return (new URL(url, baseURI)).href;\n  }\n  // Fallback to creating an anchor into a disconnected document.\n  if (!resolveDoc) {\n    resolveDoc = document.implementation.createHTMLDocument('temp');\n    resolveDoc.base = resolveDoc.createElement('base');\n    resolveDoc.head.appendChild(resolveDoc.base);\n    resolveDoc.anchor = resolveDoc.createElement('a');\n    resolveDoc.body.appendChild(resolveDoc.anchor);\n  }\n  resolveDoc.base.href = baseURI;\n  resolveDoc.anchor.href = url;\n  return resolveDoc.anchor.href || url;\n\n}\n\n/**\n * Resolves any relative URL's in the given CSS text against the provided\n * `ownerDocument`'s `baseURI`.\n *\n * @param {string} cssText CSS text to process\n * @param {string} baseURI Base URI to resolve the URL against\n * @return {string} Processed CSS text with resolved URL's\n */\nexport function resolveCss(cssText, baseURI) {\n  return cssText.replace(CSS_URL_RX, function(m, pre, url, post) {\n    return pre + '\\'' +\n      resolveUrl(url.replace(/[\"']/g, ''), baseURI) +\n      '\\'' + post;\n  });\n}\n\n/**\n * Returns a path from a given `url`. The path includes the trailing\n * `/` from the url.\n *\n * @param {string} url Input URL to transform\n * @return {string} resolved path\n */\nexport function pathFromUrl(url) {\n  return url.substring(0, url.lastIndexOf('/') + 1);\n}\n","/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\nimport './boot.js';\n\nimport { pathFromUrl } from './resolve-url.js';\nexport const useShadow = !(window.ShadyDOM);\nexport const useNativeCSSProperties = Boolean(!window.ShadyCSS || window.ShadyCSS.nativeCss);\nexport const useNativeCustomElements = !(window.customElements.polyfillWrapFlushCallback);\n\n\n/**\n * Globally settable property that is automatically assigned to\n * `ElementMixin` instances, useful for binding in templates to\n * make URL's relative to an application's root.  Defaults to the main\n * document URL, but can be overridden by users.  It may be useful to set\n * `rootPath` to provide a stable application mount path when\n * using client side routing.\n */\nexport let rootPath = undefined ||\n  pathFromUrl(document.baseURI || window.location.href);\n\n/**\n * Sets the global rootPath property used by `ElementMixin` and\n * available via `rootPath`.\n *\n * @param {string} path The new root path\n * @return {void}\n */\nexport const setRootPath = function(path) {\n  rootPath = path;\n};\n\n/**\n * A global callback used to sanitize any value before inserting it into the DOM. The callback signature is:\n *\n *     Polymer = {\n *       sanitizeDOMValue: function(value, name, type, node) { ... }\n *     }\n *\n * Where:\n *\n * `value` is the value to sanitize.\n * `name` is the name of an attribute or property (for example, href).\n * `type` indicates where the value is being inserted: one of property, attribute, or text.\n * `node` is the node where the value is being inserted.\n *\n * @type {(function(*,string,string,Node):*)|undefined}\n */\nexport let sanitizeDOMValue = undefined;\n\n/**\n * Sets the global sanitizeDOMValue available via this module's exported\n * `sanitizeDOMValue` variable.\n *\n * @param {(function(*,string,string,Node):*)|undefined} newSanitizeDOMValue the global sanitizeDOMValue callback\n * @return {void}\n */\nexport const setSanitizeDOMValue = function(newSanitizeDOMValue) {\n  sanitizeDOMValue = newSanitizeDOMValue;\n};\n\n/**\n * Globally settable property to make Polymer Gestures use passive TouchEvent listeners when recognizing gestures.\n * When set to `true`, gestures made from touch will not be able to prevent scrolling, allowing for smoother\n * scrolling performance.\n * Defaults to `false` for backwards compatibility.\n */\nexport let passiveTouchGestures = false;\n\n/**\n * Sets `passiveTouchGestures` globally for all elements using Polymer Gestures.\n *\n * @param {boolean} usePassive enable or disable passive touch gestures globally\n * @return {void}\n */\nexport const setPassiveTouchGestures = function(usePassive) {\n  passiveTouchGestures = usePassive;\n};\n","/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\nimport './boot.js';\n\n// unique global id for deduping mixins.\nlet dedupeId = 0;\n\n/**\n * @constructor\n * @extends {Function}\n */\nfunction MixinFunction(){}\n/** @type {(WeakMap | undefined)} */\nMixinFunction.prototype.__mixinApplications;\n/** @type {(Object | undefined)} */\nMixinFunction.prototype.__mixinSet;\n\n/* eslint-disable valid-jsdoc */\n/**\n * Wraps an ES6 class expression mixin such that the mixin is only applied\n * if it has not already been applied its base argument. Also memoizes mixin\n * applications.\n *\n * @template T\n * @param {T} mixin ES6 class expression mixin to wrap\n * @return {T}\n * @suppress {invalidCasts}\n */\nexport const dedupingMixin = function(mixin) {\n  let mixinApplications = /** @type {!MixinFunction} */(mixin).__mixinApplications;\n  if (!mixinApplications) {\n    mixinApplications = new WeakMap();\n    /** @type {!MixinFunction} */(mixin).__mixinApplications = mixinApplications;\n  }\n  // maintain a unique id for each mixin\n  let mixinDedupeId = dedupeId++;\n  function dedupingMixin(base) {\n    let baseSet = /** @type {!MixinFunction} */(base).__mixinSet;\n    if (baseSet && baseSet[mixinDedupeId]) {\n      return base;\n    }\n    let map = mixinApplications;\n    let extended = map.get(base);\n    if (!extended) {\n      extended = /** @type {!Function} */(mixin)(base);\n      map.set(base, extended);\n    }\n    // copy inherited mixin set from the extended class, or the base class\n    // NOTE: we avoid use of Set here because some browser (IE11)\n    // cannot extend a base Set via the constructor.\n    let mixinSet = Object.create(/** @type {!MixinFunction} */(extended).__mixinSet || baseSet || null);\n    mixinSet[mixinDedupeId] = true;\n    /** @type {!MixinFunction} */(extended).__mixinSet = mixinSet;\n    return extended;\n  }\n\n  return /** @type {T} */ (dedupingMixin);\n};\n/* eslint-enable valid-jsdoc */\n","/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\nimport { resolveCss } from './resolve-url.js';\n\nconst MODULE_STYLE_LINK_SELECTOR = 'link[rel=import][type~=css]';\nconst INCLUDE_ATTR = 'include';\nconst SHADY_UNSCOPED_ATTR = 'shady-unscoped';\n\nfunction importModule(moduleId) {\n  const /** DomModule */ PolymerDomModule = customElements.get('dom-module');\n  if (!PolymerDomModule) {\n    return null;\n  }\n  return PolymerDomModule.import(moduleId);\n}\n\nfunction styleForImport(importDoc) {\n  // NOTE: polyfill affordance.\n  // under the HTMLImports polyfill, there will be no 'body',\n  // but the import pseudo-doc can be used directly.\n  let container = importDoc.body ? importDoc.body : importDoc;\n  const importCss = resolveCss(container.textContent,\n    importDoc.baseURI);\n  const style = document.createElement('style');\n  style.textContent = importCss;\n  return style;\n}\n\n/** @typedef {{assetpath: string}} */\nlet templateWithAssetPath; // eslint-disable-line no-unused-vars\n\n/**\n * Module with utilities for collection CSS text from `<templates>`, external\n * stylesheets, and `dom-module`s.\n *\n * @summary Module with utilities for collection CSS text from various sources.\n */\n`TODO(modulizer): A namespace named Polymer.StyleGather was\ndeclared here. The surrounding comments should be reviewed,\nand this string can then be deleted`;\n\n/**\n * Returns a list of <style> elements in a space-separated list of `dom-module`s.\n *\n * @function\n * @param {string} moduleIds List of dom-module id's within which to\n * search for css.\n * @return {!Array<!HTMLStyleElement>} Array of contained <style> elements\n * @this {StyleGather}\n */\nexport function stylesFromModules(moduleIds) {\n const modules = moduleIds.trim().split(/\\s+/);\n const styles = [];\n for (let i=0; i < modules.length; i++) {\n   styles.push(...stylesFromModule(modules[i]));\n }\n return styles;\n}\n\n/**\n * Returns a list of <style> elements in a given `dom-module`.\n * Styles in a `dom-module` can come either from `<style>`s within the\n * first `<template>`, or else from one or more\n * `<link rel=\"import\" type=\"css\">` links outside the template.\n *\n * @param {string} moduleId dom-module id to gather styles from\n * @return {!Array<!HTMLStyleElement>} Array of contained styles.\n * @this {StyleGather}\n */\nexport function stylesFromModule(moduleId) {\n  const m = importModule(moduleId);\n\n  if (!m) {\n    console.warn('Could not find style data in module named', moduleId);\n    return [];\n  }\n\n  if (m._styles === undefined) {\n    const styles = [];\n    // module imports: <link rel=\"import\" type=\"css\">\n    styles.push(..._stylesFromModuleImports(m));\n    // include css from the first template in the module\n    const template = m.querySelector('template');\n    if (template) {\n      styles.push(...stylesFromTemplate(template,\n        /** @type {templateWithAssetPath} */(m).assetpath));\n    }\n\n    m._styles = styles;\n  }\n\n  return m._styles;\n}\n\n/**\n * Returns the `<style>` elements within a given template.\n *\n * @param {!HTMLTemplateElement} template Template to gather styles from\n * @param {string} baseURI baseURI for style content\n * @return {!Array<!HTMLStyleElement>} Array of styles\n * @this {StyleGather}\n */\nexport function stylesFromTemplate(template, baseURI) {\n  if (!template._styles) {\n    const styles = [];\n    // if element is a template, get content from its .content\n    const e$ = template.content.querySelectorAll('style');\n    for (let i=0; i < e$.length; i++) {\n      let e = e$[i];\n      // support style sharing by allowing styles to \"include\"\n      // other dom-modules that contain styling\n      let include = e.getAttribute(INCLUDE_ATTR);\n      if (include) {\n        styles.push(...stylesFromModules(include).filter(function(item, index, self) {\n          return self.indexOf(item) === index;\n        }));\n      }\n      if (baseURI) {\n        e.textContent = resolveCss(e.textContent, baseURI);\n      }\n      styles.push(e);\n    }\n    template._styles = styles;\n  }\n  return template._styles;\n}\n\n/**\n * Returns a list of <style> elements  from stylesheets loaded via `<link rel=\"import\" type=\"css\">` links within the specified `dom-module`.\n *\n * @param {string} moduleId Id of `dom-module` to gather CSS from\n * @return {!Array<!HTMLStyleElement>} Array of contained styles.\n * @this {StyleGather}\n */\nexport function stylesFromModuleImports(moduleId) {\n let m = importModule(moduleId);\n return m ? _stylesFromModuleImports(m) : [];\n}\n\n/**\n * @this {StyleGather}\n * @param {!HTMLElement} module dom-module element that could contain `<link rel=\"import\" type=\"css\">` styles\n * @return {!Array<!HTMLStyleElement>} Array of contained styles\n */\nfunction _stylesFromModuleImports(module) {\n  const styles = [];\n  const p$ = module.querySelectorAll(MODULE_STYLE_LINK_SELECTOR);\n  for (let i=0; i < p$.length; i++) {\n    let p = p$[i];\n    if (p.import) {\n      const importDoc = p.import;\n      const unscoped = p.hasAttribute(SHADY_UNSCOPED_ATTR);\n      if (unscoped && !importDoc._unscopedStyle) {\n        const style = styleForImport(importDoc);\n        style.setAttribute(SHADY_UNSCOPED_ATTR, '');\n        importDoc._unscopedStyle = style;\n      } else if (!importDoc._style) {\n        importDoc._style = styleForImport(importDoc);\n      }\n      styles.push(unscoped ? importDoc._unscopedStyle : importDoc._style);\n    }\n  }\n  return styles;\n}\n\n/**\n *\n * Returns CSS text of styles in a space-separated list of `dom-module`s.\n * Note: This method is deprecated, use `stylesFromModules` instead.\n *\n * @deprecated\n * @param {string} moduleIds List of dom-module id's within which to\n * search for css.\n * @return {string} Concatenated CSS content from specified `dom-module`s\n * @this {StyleGather}\n */\nexport function cssFromModules(moduleIds) {\n let modules = moduleIds.trim().split(/\\s+/);\n let cssText = '';\n for (let i=0; i < modules.length; i++) {\n   cssText += cssFromModule(modules[i]);\n }\n return cssText;\n}\n\n/**\n * Returns CSS text of styles in a given `dom-module`.  CSS in a `dom-module`\n * can come either from `<style>`s within the first `<template>`, or else\n * from one or more `<link rel=\"import\" type=\"css\">` links outside the\n * template.\n *\n * Any `<styles>` processed are removed from their original location.\n * Note: This method is deprecated, use `styleFromModule` instead.\n *\n * @deprecated\n * @param {string} moduleId dom-module id to gather styles from\n * @return {string} Concatenated CSS content from specified `dom-module`\n * @this {StyleGather}\n */\nexport function cssFromModule(moduleId) {\n  let m = importModule(moduleId);\n  if (m && m._cssText === undefined) {\n    // module imports: <link rel=\"import\" type=\"css\">\n    let cssText = _cssFromModuleImports(m);\n    // include css from the first template in the module\n    let t = m.querySelector('template');\n    if (t) {\n      cssText += cssFromTemplate(t,\n        /** @type {templateWithAssetPath} */(m).assetpath);\n    }\n    m._cssText = cssText || null;\n  }\n  if (!m) {\n    console.warn('Could not find style data in module named', moduleId);\n  }\n  return m && m._cssText || '';\n}\n\n/**\n * Returns CSS text of `<styles>` within a given template.\n *\n * Any `<styles>` processed are removed from their original location.\n * Note: This method is deprecated, use `styleFromTemplate` instead.\n *\n * @deprecated\n * @param {!HTMLTemplateElement} template Template to gather styles from\n * @param {string} baseURI Base URI to resolve the URL against\n * @return {string} Concatenated CSS content from specified template\n * @this {StyleGather}\n */\nexport function cssFromTemplate(template, baseURI) {\n  let cssText = '';\n  const e$ = stylesFromTemplate(template, baseURI);\n  // if element is a template, get content from its .content\n  for (let i=0; i < e$.length; i++) {\n    let e = e$[i];\n    if (e.parentNode) {\n      e.parentNode.removeChild(e);\n    }\n    cssText += e.textContent;\n  }\n  return cssText;\n}\n\n/**\n * Returns CSS text from stylesheets loaded via `<link rel=\"import\" type=\"css\">`\n * links within the specified `dom-module`.\n *\n * Note: This method is deprecated, use `stylesFromModuleImports` instead.\n *\n * @deprecated\n *\n * @param {string} moduleId Id of `dom-module` to gather CSS from\n * @return {string} Concatenated CSS content from links in specified `dom-module`\n * @this {StyleGather}\n */\nexport function cssFromModuleImports(moduleId) {\n  let m = importModule(moduleId);\n  return m ? _cssFromModuleImports(m) : '';\n}\n\n/**\n * @deprecated\n * @this {StyleGather}\n * @param {!HTMLElement} module dom-module element that could contain `<link rel=\"import\" type=\"css\">` styles\n * @return {string} Concatenated CSS content from links in the dom-module\n */\nfunction _cssFromModuleImports(module) {\n let cssText = '';\n let styles = _stylesFromModuleImports(module);\n for (let i=0; i < styles.length; i++) {\n   cssText += styles[i].textContent;\n }\n return cssText;\n}\n","/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\nimport '../utils/boot.js';\n\nimport { resolveUrl, pathFromUrl } from '../utils/resolve-url.js';\n\nlet modules = {};\nlet lcModules = {};\nfunction findModule(id) {\n  return modules[id] || lcModules[id.toLowerCase()];\n}\n\nfunction styleOutsideTemplateCheck(inst) {\n  if (inst.querySelector('style')) {\n    console.warn('dom-module %s has style outside template', inst.id);\n  }\n}\n\n/**\n * The `dom-module` element registers the dom it contains to the name given\n * by the module's id attribute. It provides a unified database of dom\n * accessible via its static `import` API.\n *\n * A key use case of `dom-module` is for providing custom element `<template>`s\n * via HTML imports that are parsed by the native HTML parser, that can be\n * relocated during a bundling pass and still looked up by `id`.\n *\n * Example:\n *\n *     <dom-module id=\"foo\">\n *       <img src=\"stuff.png\">\n *     </dom-module>\n *\n * Then in code in some other location that cannot access the dom-module above\n *\n *     let img = customElements.get('dom-module').import('foo', 'img');\n *\n * @customElement\n * @extends HTMLElement\n * @summary Custom element that provides a registry of relocatable DOM content\n *   by `id` that is agnostic to bundling.\n * @unrestricted\n */\nexport class DomModule extends HTMLElement {\n\n  static get observedAttributes() { return ['id']; }\n\n  /**\n   * Retrieves the element specified by the css `selector` in the module\n   * registered by `id`. For example, this.import('foo', 'img');\n   * @param {string} id The id of the dom-module in which to search.\n   * @param {string=} selector The css selector by which to find the element.\n   * @return {Element} Returns the element which matches `selector` in the\n   * module registered at the specified `id`.\n   */\n  static import(id, selector) {\n    if (id) {\n      let m = findModule(id);\n      if (m && selector) {\n        return m.querySelector(selector);\n      }\n      return m;\n    }\n    return null;\n  }\n\n  /* eslint-disable no-unused-vars */\n  /**\n   * @param {string} name Name of attribute.\n   * @param {?string} old Old value of attribute.\n   * @param {?string} value Current value of attribute.\n   * @param {?string} namespace Attribute namespace.\n   * @return {void}\n   */\n  attributeChangedCallback(name, old, value, namespace) {\n    if (old !== value) {\n      this.register();\n    }\n  }\n  /* eslint-enable no-unused-args */\n\n  /**\n   * The absolute URL of the original location of this `dom-module`.\n   *\n   * This value will differ from this element's `ownerDocument` in the\n   * following ways:\n   * - Takes into account any `assetpath` attribute added during bundling\n   *   to indicate the original location relative to the bundled location\n   * - Uses the HTMLImports polyfill's `importForElement` API to ensure\n   *   the path is relative to the import document's location since\n   *   `ownerDocument` is not currently polyfilled\n   */\n  get assetpath() {\n    // Don't override existing assetpath.\n    if (!this.__assetpath) {\n      // note: assetpath set via an attribute must be relative to this\n      // element's location; accomodate polyfilled HTMLImports\n      const owner = window.HTMLImports && HTMLImports.importForElement ?\n        HTMLImports.importForElement(this) || document : this.ownerDocument;\n      const url = resolveUrl(\n        this.getAttribute('assetpath') || '', owner.baseURI);\n      this.__assetpath = pathFromUrl(url);\n    }\n    return this.__assetpath;\n  }\n\n  /**\n   * Registers the dom-module at a given id. This method should only be called\n   * when a dom-module is imperatively created. For\n   * example, `document.createElement('dom-module').register('foo')`.\n   * @param {string=} id The id at which to register the dom-module.\n   * @return {void}\n   */\n  register(id) {\n    id = id || this.id;\n    if (id) {\n      this.id = id;\n      // store id separate from lowercased id so that\n      // in all cases mixedCase id will stored distinctly\n      // and lowercase version is a fallback\n      modules[id] = this;\n      lcModules[id.toLowerCase()] = this;\n      styleOutsideTemplateCheck(this);\n    }\n  }\n}\n\nDomModule.prototype['modules'] = modules;\n\ncustomElements.define('dom-module', DomModule);\n","/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\nimport './boot.js';\n\n/**\n * Module with utilities for manipulating structured data path strings.\n *\n * @summary Module with utilities for manipulating structured data path strings.\n */\n`TODO(modulizer): A namespace named Polymer.Path was\ndeclared here. The surrounding comments should be reviewed,\nand this string can then be deleted`;\n\n/**\n * Returns true if the given string is a structured data path (has dots).\n *\n * Example:\n *\n * ```\n * isPath('foo.bar.baz') // true\n * isPath('foo')         // false\n * ```\n *\n * @param {string} path Path string\n * @return {boolean} True if the string contained one or more dots\n */\nexport function isPath(path) {\n  return path.indexOf('.') >= 0;\n}\n\n/**\n * Returns the root property name for the given path.\n *\n * Example:\n *\n * ```\n * root('foo.bar.baz') // 'foo'\n * root('foo')         // 'foo'\n * ```\n *\n * @param {string} path Path string\n * @return {string} Root property name\n */\nexport function root(path) {\n  let dotIndex = path.indexOf('.');\n  if (dotIndex === -1) {\n    return path;\n  }\n  return path.slice(0, dotIndex);\n}\n\n/**\n * Given `base` is `foo.bar`, `foo` is an ancestor, `foo.bar` is not\n * Returns true if the given path is an ancestor of the base path.\n *\n * Example:\n *\n * ```\n * isAncestor('foo.bar', 'foo')         // true\n * isAncestor('foo.bar', 'foo.bar')     // false\n * isAncestor('foo.bar', 'foo.bar.baz') // false\n * ```\n *\n * @param {string} base Path string to test against.\n * @param {string} path Path string to test.\n * @return {boolean} True if `path` is an ancestor of `base`.\n */\nexport function isAncestor(base, path) {\n  //     base.startsWith(path + '.');\n  return base.indexOf(path + '.') === 0;\n}\n\n/**\n * Given `base` is `foo.bar`, `foo.bar.baz` is an descendant\n *\n * Example:\n *\n * ```\n * isDescendant('foo.bar', 'foo.bar.baz') // true\n * isDescendant('foo.bar', 'foo.bar')     // false\n * isDescendant('foo.bar', 'foo')         // false\n * ```\n *\n * @param {string} base Path string to test against.\n * @param {string} path Path string to test.\n * @return {boolean} True if `path` is a descendant of `base`.\n */\nexport function isDescendant(base, path) {\n  //     path.startsWith(base + '.');\n  return path.indexOf(base + '.') === 0;\n}\n\n/**\n * Replaces a previous base path with a new base path, preserving the\n * remainder of the path.\n *\n * User must ensure `path` has a prefix of `base`.\n *\n * Example:\n *\n * ```\n * translate('foo.bar', 'zot', 'foo.bar.baz') // 'zot.baz'\n * ```\n *\n * @param {string} base Current base string to remove\n * @param {string} newBase New base string to replace with\n * @param {string} path Path to translate\n * @return {string} Translated string\n */\nexport function translate(base, newBase, path) {\n  return newBase + path.slice(base.length);\n}\n\n/**\n * @param {string} base Path string to test against\n * @param {string} path Path string to test\n * @return {boolean} True if `path` is equal to `base`\n * @this {Path}\n */\nexport function matches(base, path) {\n  return (base === path) ||\n         isAncestor(base, path) ||\n         isDescendant(base, path);\n}\n\n/**\n * Converts array-based paths to flattened path.  String-based paths\n * are returned as-is.\n *\n * Example:\n *\n * ```\n * normalize(['foo.bar', 0, 'baz'])  // 'foo.bar.0.baz'\n * normalize('foo.bar.0.baz')        // 'foo.bar.0.baz'\n * ```\n *\n * @param {string | !Array<string|number>} path Input path\n * @return {string} Flattened path\n */\nexport function normalize(path) {\n  if (Array.isArray(path)) {\n    let parts = [];\n    for (let i=0; i<path.length; i++) {\n      let args = path[i].toString().split('.');\n      for (let j=0; j<args.length; j++) {\n        parts.push(args[j]);\n      }\n    }\n    return parts.join('.');\n  } else {\n    return path;\n  }\n}\n\n/**\n * Splits a path into an array of property names. Accepts either arrays\n * of path parts or strings.\n *\n * Example:\n *\n * ```\n * split(['foo.bar', 0, 'baz'])  // ['foo', 'bar', '0', 'baz']\n * split('foo.bar.0.baz')        // ['foo', 'bar', '0', 'baz']\n * ```\n *\n * @param {string | !Array<string|number>} path Input path\n * @return {!Array<string>} Array of path parts\n * @this {Path}\n * @suppress {checkTypes}\n */\nexport function split(path) {\n  if (Array.isArray(path)) {\n    return normalize(path).split('.');\n  }\n  return path.toString().split('.');\n}\n\n/**\n * Reads a value from a path.  If any sub-property in the path is `undefined`,\n * this method returns `undefined` (will never throw.\n *\n * @param {Object} root Object from which to dereference path from\n * @param {string | !Array<string|number>} path Path to read\n * @param {Object=} info If an object is provided to `info`, the normalized\n *  (flattened) path will be set to `info.path`.\n * @return {*} Value at path, or `undefined` if the path could not be\n *  fully dereferenced.\n * @this {Path}\n */\nexport function get(root, path, info) {\n  let prop = root;\n  let parts = split(path);\n  // Loop over path parts[0..n-1] and dereference\n  for (let i=0; i<parts.length; i++) {\n    if (!prop) {\n      return;\n    }\n    let part = parts[i];\n    prop = prop[part];\n  }\n  if (info) {\n    info.path = parts.join('.');\n  }\n  return prop;\n}\n\n/**\n * Sets a value to a path.  If any sub-property in the path is `undefined`,\n * this method will no-op.\n *\n * @param {Object} root Object from which to dereference path from\n * @param {string | !Array<string|number>} path Path to set\n * @param {*} value Value to set to path\n * @return {string | undefined} The normalized version of the input path\n * @this {Path}\n */\nexport function set(root, path, value) {\n  let prop = root;\n  let parts = split(path);\n  let last = parts[parts.length-1];\n  if (parts.length > 1) {\n    // Loop over path parts[0..n-2] and dereference\n    for (let i=0; i<parts.length-1; i++) {\n      let part = parts[i];\n      prop = prop[part];\n      if (!prop) {\n        return;\n      }\n    }\n    // Set value to object at end of path\n    prop[last] = value;\n  } else {\n    // Simple property set\n    prop[path] = value;\n  }\n  return parts.join('.');\n}\n\n/**\n * Returns true if the given string is a structured data path (has dots).\n *\n * This function is deprecated.  Use `isPath` instead.\n *\n * Example:\n *\n * ```\n * isDeep('foo.bar.baz') // true\n * isDeep('foo')         // false\n * ```\n *\n * @deprecated\n * @param {string} path Path string\n * @return {boolean} True if the string contained one or more dots\n */\nexport const isDeep = isPath;\n","/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\nimport './boot.js';\n\nconst caseMap = {};\nconst DASH_TO_CAMEL = /-[a-z]/g;\nconst CAMEL_TO_DASH = /([A-Z])/g;\n\n/**\n * Module with utilities for converting between \"dash-case\" and \"camelCase\"\n * identifiers.\n *\n * @summary Module that provides utilities for converting between \"dash-case\"\n *   and \"camelCase\".\n */\n`TODO(modulizer): A namespace named Polymer.CaseMap was\ndeclared here. The surrounding comments should be reviewed,\nand this string can then be deleted`;\n\n/**\n * Converts \"dash-case\" identifier (e.g. `foo-bar-baz`) to \"camelCase\"\n * (e.g. `fooBarBaz`).\n *\n * @param {string} dash Dash-case identifier\n * @return {string} Camel-case representation of the identifier\n */\nexport function dashToCamelCase(dash) {\n  return caseMap[dash] || (\n    caseMap[dash] = dash.indexOf('-') < 0 ? dash : dash.replace(DASH_TO_CAMEL,\n      (m) => m[1].toUpperCase()\n    )\n  );\n}\n\n/**\n * Converts \"camelCase\" identifier (e.g. `fooBarBaz`) to \"dash-case\"\n * (e.g. `foo-bar-baz`).\n *\n * @param {string} camel Camel-case identifier\n * @return {string} Dash-case representation of the identifier\n */\nexport function camelToDashCase(camel) {\n  return caseMap[camel] || (\n    caseMap[camel] = camel.replace(CAMEL_TO_DASH, '-$1').toLowerCase()\n  );\n}\n","/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\n/**\n * @fileoverview\n *\n * This module provides a number of strategies for enqueuing asynchronous\n * tasks. Each sub-module provides a standard `run(fn)` interface that returns a\n * handle, and a `cancel(handle)` interface for canceling async tasks before\n * they run.\n *\n * @summary Module that provides a number of strategies for enqueuing\n * asynchronous tasks.\n */\n\nimport './boot.js';\n\n// Microtask implemented using Mutation Observer\nlet microtaskCurrHandle = 0;\nlet microtaskLastHandle = 0;\nlet microtaskCallbacks = [];\nlet microtaskNodeContent = 0;\nlet microtaskNode = document.createTextNode('');\nnew window.MutationObserver(microtaskFlush).observe(microtaskNode, {characterData: true});\n\nfunction microtaskFlush() {\n  const len = microtaskCallbacks.length;\n  for (let i = 0; i < len; i++) {\n    let cb = microtaskCallbacks[i];\n    if (cb) {\n      try {\n        cb();\n      } catch (e) {\n        setTimeout(() => { throw e; });\n      }\n    }\n  }\n  microtaskCallbacks.splice(0, len);\n  microtaskLastHandle += len;\n}\n\n/**\n * Async interface wrapper around `setTimeout`.\n *\n * @namespace\n * @summary Async interface wrapper around `setTimeout`.\n */\nconst timeOut = {\n  /**\n   * Returns a sub-module with the async interface providing the provided\n   * delay.\n   *\n   * @memberof timeOut\n   * @param {number=} delay Time to wait before calling callbacks in ms\n   * @return {!AsyncInterface} An async timeout interface\n   */\n  after(delay) {\n    return {\n      run(fn) { return window.setTimeout(fn, delay); },\n      cancel(handle) {\n        window.clearTimeout(handle);\n      }\n    };\n  },\n  /**\n   * Enqueues a function called in the next task.\n   *\n   * @memberof timeOut\n   * @param {!Function} fn Callback to run\n   * @param {number=} delay Delay in milliseconds\n   * @return {number} Handle used for canceling task\n   */\n  run(fn, delay) {\n    return window.setTimeout(fn, delay);\n  },\n  /**\n   * Cancels a previously enqueued `timeOut` callback.\n   *\n   * @memberof timeOut\n   * @param {number} handle Handle returned from `run` of callback to cancel\n   * @return {void}\n   */\n  cancel(handle) {\n    window.clearTimeout(handle);\n  }\n};\nexport {timeOut};\n\n/**\n * Async interface wrapper around `requestAnimationFrame`.\n *\n * @namespace\n * @summary Async interface wrapper around `requestAnimationFrame`.\n */\nconst animationFrame = {\n  /**\n   * Enqueues a function called at `requestAnimationFrame` timing.\n   *\n   * @memberof animationFrame\n   * @param {function(number):void} fn Callback to run\n   * @return {number} Handle used for canceling task\n   */\n  run(fn) {\n    return window.requestAnimationFrame(fn);\n  },\n  /**\n   * Cancels a previously enqueued `animationFrame` callback.\n   *\n   * @memberof animationFrame\n   * @param {number} handle Handle returned from `run` of callback to cancel\n   * @return {void}\n   */\n  cancel(handle) {\n    window.cancelAnimationFrame(handle);\n  }\n};\nexport {animationFrame};\n\n/**\n * Async interface wrapper around `requestIdleCallback`.  Falls back to\n * `setTimeout` on browsers that do not support `requestIdleCallback`.\n *\n * @namespace\n * @summary Async interface wrapper around `requestIdleCallback`.\n */\nconst idlePeriod = {\n  /**\n   * Enqueues a function called at `requestIdleCallback` timing.\n   *\n   * @memberof idlePeriod\n   * @param {function(!IdleDeadline):void} fn Callback to run\n   * @return {number} Handle used for canceling task\n   */\n  run(fn) {\n    return window.requestIdleCallback ?\n      window.requestIdleCallback(fn) :\n      window.setTimeout(fn, 16);\n  },\n  /**\n   * Cancels a previously enqueued `idlePeriod` callback.\n   *\n   * @memberof idlePeriod\n   * @param {number} handle Handle returned from `run` of callback to cancel\n   * @return {void}\n   */\n  cancel(handle) {\n    window.cancelIdleCallback ?\n      window.cancelIdleCallback(handle) :\n      window.clearTimeout(handle);\n  }\n};\nexport {idlePeriod};\n\n/**\n * Async interface for enqueuing callbacks that run at microtask timing.\n *\n * Note that microtask timing is achieved via a single `MutationObserver`,\n * and thus callbacks enqueued with this API will all run in a single\n * batch, and not interleaved with other microtasks such as promises.\n * Promises are avoided as an implementation choice for the time being\n * due to Safari bugs that cause Promises to lack microtask guarantees.\n *\n * @namespace\n * @summary Async interface for enqueuing callbacks that run at microtask\n *   timing.\n */\nconst microTask = {\n\n  /**\n   * Enqueues a function called at microtask timing.\n   *\n   * @memberof microTask\n   * @param {!Function=} callback Callback to run\n   * @return {number} Handle used for canceling task\n   */\n  run(callback) {\n    microtaskNode.textContent = microtaskNodeContent++;\n    microtaskCallbacks.push(callback);\n    return microtaskCurrHandle++;\n  },\n\n  /**\n   * Cancels a previously enqueued `microTask` callback.\n   *\n   * @memberof microTask\n   * @param {number} handle Handle returned from `run` of callback to cancel\n   * @return {void}\n   */\n  cancel(handle) {\n    const idx = handle - microtaskLastHandle;\n    if (idx >= 0) {\n      if (!microtaskCallbacks[idx]) {\n        throw new Error('invalid async handle: ' + handle);\n      }\n      microtaskCallbacks[idx] = null;\n    }\n  }\n\n};\nexport {microTask};\n","/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\nimport '../utils/boot.js';\n\nimport { dedupingMixin } from '../utils/mixin.js';\nimport { microTask } from '../utils/async.js';\n\n/** @const {!AsyncInterface} */\nconst microtask = microTask;\n\n/**\n * Element class mixin that provides basic meta-programming for creating one\n * or more property accessors (getter/setter pair) that enqueue an async\n * (batched) `_propertiesChanged` callback.\n *\n * For basic usage of this mixin, call `MyClass.createProperties(props)`\n * once at class definition time to create property accessors for properties\n * named in props, implement `_propertiesChanged` to react as desired to\n * property changes, and implement `static get observedAttributes()` and\n * include lowercase versions of any property names that should be set from\n * attributes. Last, call `this._enableProperties()` in the element's\n * `connectedCallback` to enable the accessors.\n *\n * @mixinFunction\n * @polymer\n * @summary Element class mixin for reacting to property changes from\n *   generated property accessors.\n */\nexport const PropertiesChanged = dedupingMixin(superClass => {\n\n  /**\n   * @polymer\n   * @mixinClass\n   * @extends {superClass}\n   * @implements {Polymer_PropertiesChanged}\n   * @unrestricted\n   */\n  class PropertiesChanged extends superClass {\n\n    /**\n     * Creates property accessors for the given property names.\n     * @param {!Object} props Object whose keys are names of accessors.\n     * @return {void}\n     * @protected\n     */\n    static createProperties(props) {\n      const proto = this.prototype;\n      for (let prop in props) {\n        // don't stomp an existing accessor\n        if (!(prop in proto)) {\n          proto._createPropertyAccessor(prop);\n        }\n      }\n    }\n\n    /**\n     * Returns an attribute name that corresponds to the given property.\n     * The attribute name is the lowercased property name. Override to\n     * customize this mapping.\n     * @param {string} property Property to convert\n     * @return {string} Attribute name corresponding to the given property.\n     *\n     * @protected\n     */\n    static attributeNameForProperty(property) {\n      return property.toLowerCase();\n    }\n\n    /**\n     * Override point to provide a type to which to deserialize a value to\n     * a given property.\n     * @param {string} name Name of property\n     *\n     * @protected\n     */\n    static typeForProperty(name) { } //eslint-disable-line no-unused-vars\n\n    /**\n     * Creates a setter/getter pair for the named property with its own\n     * local storage.  The getter returns the value in the local storage,\n     * and the setter calls `_setProperty`, which updates the local storage\n     * for the property and enqueues a `_propertiesChanged` callback.\n     *\n     * This method may be called on a prototype or an instance.  Calling\n     * this method may overwrite a property value that already exists on\n     * the prototype/instance by creating the accessor.\n     *\n     * @param {string} property Name of the property\n     * @param {boolean=} readOnly When true, no setter is created; the\n     *   protected `_setProperty` function must be used to set the property\n     * @return {void}\n     * @protected\n     */\n    _createPropertyAccessor(property, readOnly) {\n      this._addPropertyToAttributeMap(property);\n      if (!this.hasOwnProperty('__dataHasAccessor')) {\n        this.__dataHasAccessor = Object.assign({}, this.__dataHasAccessor);\n      }\n      if (!this.__dataHasAccessor[property]) {\n        this.__dataHasAccessor[property] = true;\n        this._definePropertyAccessor(property, readOnly);\n      }\n    }\n\n    /**\n     * Adds the given `property` to a map matching attribute names\n     * to property names, using `attributeNameForProperty`. This map is\n     * used when deserializing attribute values to properties.\n     *\n     * @param {string} property Name of the property\n     */\n    _addPropertyToAttributeMap(property) {\n      if (!this.hasOwnProperty('__dataAttributes')) {\n        this.__dataAttributes = Object.assign({}, this.__dataAttributes);\n      }\n      if (!this.__dataAttributes[property]) {\n        const attr = this.constructor.attributeNameForProperty(property);\n        this.__dataAttributes[attr] = property;\n      }\n    }\n\n    /**\n     * Defines a property accessor for the given property.\n     * @param {string} property Name of the property\n     * @param {boolean=} readOnly When true, no setter is created\n     * @return {void}\n     */\n     _definePropertyAccessor(property, readOnly) {\n      Object.defineProperty(this, property, {\n        /* eslint-disable valid-jsdoc */\n        /** @this {PropertiesChanged} */\n        get() {\n          return this._getProperty(property);\n        },\n        /** @this {PropertiesChanged} */\n        set: readOnly ? function () {} : function (value) {\n          this._setProperty(property, value);\n        }\n        /* eslint-enable */\n      });\n    }\n\n    constructor() {\n      super();\n      this.__dataEnabled = false;\n      this.__dataReady = false;\n      this.__dataInvalid = false;\n      this.__data = {};\n      this.__dataPending = null;\n      this.__dataOld = null;\n      this.__dataInstanceProps = null;\n      this.__serializing = false;\n      this._initializeProperties();\n    }\n\n    /**\n     * Lifecycle callback called when properties are enabled via\n     * `_enableProperties`.\n     *\n     * Users may override this function to implement behavior that is\n     * dependent on the element having its property data initialized, e.g.\n     * from defaults (initialized from `constructor`, `_initializeProperties`),\n     * `attributeChangedCallback`, or values propagated from host e.g. via\n     * bindings.  `super.ready()` must be called to ensure the data system\n     * becomes enabled.\n     *\n     * @return {void}\n     * @public\n     */\n    ready() {\n      this.__dataReady = true;\n      this._flushProperties();\n    }\n\n    /**\n     * Initializes the local storage for property accessors.\n     *\n     * Provided as an override point for performing any setup work prior\n     * to initializing the property accessor system.\n     *\n     * @return {void}\n     * @protected\n     */\n    _initializeProperties() {\n      // Capture instance properties; these will be set into accessors\n      // during first flush. Don't set them here, since we want\n      // these to overwrite defaults/constructor assignments\n      for (let p in this.__dataHasAccessor) {\n        if (this.hasOwnProperty(p)) {\n          this.__dataInstanceProps = this.__dataInstanceProps || {};\n          this.__dataInstanceProps[p] = this[p];\n          delete this[p];\n        }\n      }\n    }\n\n    /**\n     * Called at ready time with bag of instance properties that overwrote\n     * accessors when the element upgraded.\n     *\n     * The default implementation sets these properties back into the\n     * setter at ready time.  This method is provided as an override\n     * point for customizing or providing more efficient initialization.\n     *\n     * @param {Object} props Bag of property values that were overwritten\n     *   when creating property accessors.\n     * @return {void}\n     * @protected\n     */\n    _initializeInstanceProperties(props) {\n      Object.assign(this, props);\n    }\n\n    /**\n     * Updates the local storage for a property (via `_setPendingProperty`)\n     * and enqueues a `_proeprtiesChanged` callback.\n     *\n     * @param {string} property Name of the property\n     * @param {*} value Value to set\n     * @return {void}\n     * @protected\n     */\n    _setProperty(property, value) {\n      if (this._setPendingProperty(property, value)) {\n        this._invalidateProperties();\n      }\n    }\n\n    /**\n     * Returns the value for the given property.\n     * @param {string} property Name of property\n     * @return {*} Value for the given property\n     * @protected\n     */\n    _getProperty(property) {\n      return this.__data[property];\n    }\n\n    /* eslint-disable no-unused-vars */\n    /**\n     * Updates the local storage for a property, records the previous value,\n     * and adds it to the set of \"pending changes\" that will be passed to the\n     * `_propertiesChanged` callback.  This method does not enqueue the\n     * `_propertiesChanged` callback.\n     *\n     * @param {string} property Name of the property\n     * @param {*} value Value to set\n     * @param {boolean=} ext Not used here; affordance for closure\n     * @return {boolean} Returns true if the property changed\n     * @protected\n     */\n    _setPendingProperty(property, value, ext) {\n      let old = this.__data[property];\n      let changed = this._shouldPropertyChange(property, value, old);\n      if (changed) {\n        if (!this.__dataPending) {\n          this.__dataPending = {};\n          this.__dataOld = {};\n        }\n        // Ensure old is captured from the last turn\n        if (this.__dataOld && !(property in this.__dataOld)) {\n          this.__dataOld[property] = old;\n        }\n        this.__data[property] = value;\n        this.__dataPending[property] = value;\n      }\n      return changed;\n    }\n    /* eslint-enable */\n\n    /**\n     * Marks the properties as invalid, and enqueues an async\n     * `_propertiesChanged` callback.\n     *\n     * @return {void}\n     * @protected\n     */\n    _invalidateProperties() {\n      if (!this.__dataInvalid && this.__dataReady) {\n        this.__dataInvalid = true;\n        microtask.run(() => {\n          if (this.__dataInvalid) {\n            this.__dataInvalid = false;\n            this._flushProperties();\n          }\n        });\n      }\n    }\n\n    /**\n     * Call to enable property accessor processing. Before this method is\n     * called accessor values will be set but side effects are\n     * queued. When called, any pending side effects occur immediately.\n     * For elements, generally `connectedCallback` is a normal spot to do so.\n     * It is safe to call this method multiple times as it only turns on\n     * property accessors once.\n     *\n     * @return {void}\n     * @protected\n     */\n    _enableProperties() {\n      if (!this.__dataEnabled) {\n        this.__dataEnabled = true;\n        if (this.__dataInstanceProps) {\n          this._initializeInstanceProperties(this.__dataInstanceProps);\n          this.__dataInstanceProps = null;\n        }\n        this.ready();\n      }\n    }\n\n    /**\n     * Calls the `_propertiesChanged` callback with the current set of\n     * pending changes (and old values recorded when pending changes were\n     * set), and resets the pending set of changes. Generally, this method\n     * should not be called in user code.\n     *\n     * @return {void}\n     * @protected\n     */\n    _flushProperties() {\n      const props = this.__data;\n      const changedProps = this.__dataPending;\n      const old = this.__dataOld;\n      if (this._shouldPropertiesChange(props, changedProps, old)) {\n        this.__dataPending = null;\n        this.__dataOld = null;\n        this._propertiesChanged(props, changedProps, old);\n      }\n    }\n\n    /**\n     * Called in `_flushProperties` to determine if `_propertiesChanged`\n     * should be called. The default implementation returns true if\n     * properties are pending. Override to customize when\n     * `_propertiesChanged` is called.\n     * @param {!Object} currentProps Bag of all current accessor values\n     * @param {!Object} changedProps Bag of properties changed since the last\n     *   call to `_propertiesChanged`\n     * @param {!Object} oldProps Bag of previous values for each property\n     *   in `changedProps`\n     * @return {boolean} true if changedProps is truthy\n     */\n    _shouldPropertiesChange(currentProps, changedProps, oldProps) { // eslint-disable-line no-unused-vars\n      return Boolean(changedProps);\n    }\n\n    /**\n     * Callback called when any properties with accessors created via\n     * `_createPropertyAccessor` have been set.\n     *\n     * @param {!Object} currentProps Bag of all current accessor values\n     * @param {!Object} changedProps Bag of properties changed since the last\n     *   call to `_propertiesChanged`\n     * @param {!Object} oldProps Bag of previous values for each property\n     *   in `changedProps`\n     * @return {void}\n     * @protected\n     */\n    _propertiesChanged(currentProps, changedProps, oldProps) { // eslint-disable-line no-unused-vars\n    }\n\n    /**\n     * Method called to determine whether a property value should be\n     * considered as a change and cause the `_propertiesChanged` callback\n     * to be enqueued.\n     *\n     * The default implementation returns `true` if a strict equality\n     * check fails. The method always returns false for `NaN`.\n     *\n     * Override this method to e.g. provide stricter checking for\n     * Objects/Arrays when using immutable patterns.\n     *\n     * @param {string} property Property name\n     * @param {*} value New property value\n     * @param {*} old Previous property value\n     * @return {boolean} Whether the property should be considered a change\n     *   and enqueue a `_proeprtiesChanged` callback\n     * @protected\n     */\n    _shouldPropertyChange(property, value, old) {\n      return (\n        // Strict equality check\n        (old !== value &&\n          // This ensures (old==NaN, value==NaN) always returns false\n          (old === old || value === value))\n      );\n    }\n\n    /**\n     * Implements native Custom Elements `attributeChangedCallback` to\n     * set an attribute value to a property via `_attributeToProperty`.\n     *\n     * @param {string} name Name of attribute that changed\n     * @param {?string} old Old attribute value\n     * @param {?string} value New attribute value\n     * @param {?string} namespace Attribute namespace.\n     * @return {void}\n     * @suppress {missingProperties} Super may or may not implement the callback\n     */\n    attributeChangedCallback(name, old, value, namespace) {\n      if (old !== value) {\n        this._attributeToProperty(name, value);\n      }\n      if (super.attributeChangedCallback) {\n        super.attributeChangedCallback(name, old, value, namespace);\n      }\n    }\n\n    /**\n     * Deserializes an attribute to its associated property.\n     *\n     * This method calls the `_deserializeValue` method to convert the string to\n     * a typed value.\n     *\n     * @param {string} attribute Name of attribute to deserialize.\n     * @param {?string} value of the attribute.\n     * @param {*=} type type to deserialize to, defaults to the value\n     * returned from `typeForProperty`\n     * @return {void}\n     */\n    _attributeToProperty(attribute, value, type) {\n      if (!this.__serializing) {\n        const map = this.__dataAttributes;\n        const property = map && map[attribute] || attribute;\n        this[property] = this._deserializeValue(value, type ||\n          this.constructor.typeForProperty(property));\n      }\n    }\n\n    /**\n     * Serializes a property to its associated attribute.\n     *\n     * @suppress {invalidCasts} Closure can't figure out `this` is an element.\n     *\n     * @param {string} property Property name to reflect.\n     * @param {string=} attribute Attribute name to reflect to.\n     * @param {*=} value Property value to refect.\n     * @return {void}\n     */\n    _propertyToAttribute(property, attribute, value) {\n      this.__serializing = true;\n      value = (arguments.length < 3) ? this[property] : value;\n      this._valueToNodeAttribute(/** @type {!HTMLElement} */(this), value,\n        attribute || this.constructor.attributeNameForProperty(property));\n      this.__serializing = false;\n    }\n\n    /**\n     * Sets a typed value to an HTML attribute on a node.\n     *\n     * This method calls the `_serializeValue` method to convert the typed\n     * value to a string.  If the `_serializeValue` method returns `undefined`,\n     * the attribute will be removed (this is the default for boolean\n     * type `false`).\n     *\n     * @param {Element} node Element to set attribute to.\n     * @param {*} value Value to serialize.\n     * @param {string} attribute Attribute name to serialize to.\n     * @return {void}\n     */\n    _valueToNodeAttribute(node, value, attribute) {\n      const str = this._serializeValue(value);\n      if (str === undefined) {\n        node.removeAttribute(attribute);\n      } else {\n        node.setAttribute(attribute, str);\n      }\n    }\n\n    /**\n     * Converts a typed JavaScript value to a string.\n     *\n     * This method is called when setting JS property values to\n     * HTML attributes.  Users may override this method to provide\n     * serialization for custom types.\n     *\n     * @param {*} value Property value to serialize.\n     * @return {string | undefined} String serialized from the provided\n     * property  value.\n     */\n    _serializeValue(value) {\n      switch (typeof value) {\n        case 'boolean':\n          return value ? '' : undefined;\n        default:\n          return value != null ? value.toString() : undefined;\n      }\n    }\n\n    /**\n     * Converts a string to a typed JavaScript value.\n     *\n     * This method is called when reading HTML attribute values to\n     * JS properties.  Users may override this method to provide\n     * deserialization for custom `type`s. Types for `Boolean`, `String`,\n     * and `Number` convert attributes to the expected types.\n     *\n     * @param {?string} value Value to deserialize.\n     * @param {*=} type Type to deserialize the string to.\n     * @return {*} Typed value deserialized from the provided string.\n     */\n    _deserializeValue(value, type) {\n      switch (type) {\n        case Boolean:\n          return (value !== null);\n        case Number:\n          return Number(value);\n        default:\n          return value;\n      }\n    }\n\n  }\n\n  return PropertiesChanged;\n});\n","/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\nimport '../utils/boot.js';\n\nimport { dedupingMixin } from '../utils/mixin.js';\nimport * as caseMap$0 from '../utils/case-map.js';\nimport { PropertiesChanged } from './properties-changed.js';\n\nlet caseMap = caseMap$0;\n\n// Save map of native properties; this forms a blacklist or properties\n// that won't have their values \"saved\" by `saveAccessorValue`, since\n// reading from an HTMLElement accessor from the context of a prototype throws\nconst nativeProperties = {};\nlet proto = HTMLElement.prototype;\nwhile (proto) {\n  let props = Object.getOwnPropertyNames(proto);\n  for (let i=0; i<props.length; i++) {\n    nativeProperties[props[i]] = true;\n  }\n  proto = Object.getPrototypeOf(proto);\n}\n\n/**\n * Used to save the value of a property that will be overridden with\n * an accessor. If the `model` is a prototype, the values will be saved\n * in `__dataProto`, and it's up to the user (or downstream mixin) to\n * decide how/when to set these values back into the accessors.\n * If `model` is already an instance (it has a `__data` property), then\n * the value will be set as a pending property, meaning the user should\n * call `_invalidateProperties` or `_flushProperties` to take effect\n *\n * @param {Object} model Prototype or instance\n * @param {string} property Name of property\n * @return {void}\n * @private\n */\nfunction saveAccessorValue(model, property) {\n  // Don't read/store value for any native properties since they could throw\n  if (!nativeProperties[property]) {\n    let value = model[property];\n    if (value !== undefined) {\n      if (model.__data) {\n        // Adding accessor to instance; update the property\n        // It is the user's responsibility to call _flushProperties\n        model._setPendingProperty(property, value);\n      } else {\n        // Adding accessor to proto; save proto's value for instance-time use\n        if (!model.__dataProto) {\n          model.__dataProto = {};\n        } else if (!model.hasOwnProperty(JSCompiler_renameProperty('__dataProto', model))) {\n          model.__dataProto = Object.create(model.__dataProto);\n        }\n        model.__dataProto[property] = value;\n      }\n    }\n  }\n}\n\n/**\n * Element class mixin that provides basic meta-programming for creating one\n * or more property accessors (getter/setter pair) that enqueue an async\n * (batched) `_propertiesChanged` callback.\n *\n * For basic usage of this mixin:\n *\n * -   Declare attributes to observe via the standard `static get observedAttributes()`. Use\n *     `dash-case` attribute names to represent `camelCase` property names.\n * -   Implement the `_propertiesChanged` callback on the class.\n * -   Call `MyClass.createPropertiesForAttributes()` **once** on the class to generate\n *     property accessors for each observed attribute. This must be called before the first\n *     instance is created, for example, by calling it before calling `customElements.define`.\n *     It can also be called lazily from the element's `constructor`, as long as it's guarded so\n *     that the call is only made once, when the first instance is created.\n * -   Call `this._enableProperties()` in the element's `connectedCallback` to enable\n *     the accessors.\n *\n * Any `observedAttributes` will automatically be\n * deserialized via `attributeChangedCallback` and set to the associated\n * property using `dash-case`-to-`camelCase` convention.\n *\n * @mixinFunction\n * @polymer\n * @appliesMixin PropertiesChanged\n * @summary Element class mixin for reacting to property changes from\n *   generated property accessors.\n */\nexport const PropertyAccessors = dedupingMixin(superClass => {\n\n  /**\n   * @constructor\n   * @extends {superClass}\n   * @implements {Polymer_PropertiesChanged}\n   * @unrestricted\n   */\n   const base = PropertiesChanged(superClass);\n\n  /**\n   * @polymer\n   * @mixinClass\n   * @implements {Polymer_PropertyAccessors}\n   * @extends {base}\n   * @unrestricted\n   */\n  class PropertyAccessors extends base {\n\n    /**\n     * Generates property accessors for all attributes in the standard\n     * static `observedAttributes` array.\n     *\n     * Attribute names are mapped to property names using the `dash-case` to\n     * `camelCase` convention\n     *\n     * @return {void}\n     */\n    static createPropertiesForAttributes() {\n      let a$ = this.observedAttributes;\n      for (let i=0; i < a$.length; i++) {\n        this.prototype._createPropertyAccessor(caseMap.dashToCamelCase(a$[i]));\n      }\n    }\n\n    /**\n     * Returns an attribute name that corresponds to the given property.\n     * By default, converts camel to dash case, e.g. `fooBar` to `foo-bar`.\n     * @param {string} property Property to convert\n     * @return {string} Attribute name corresponding to the given property.\n     *\n     * @protected\n     */\n    static attributeNameForProperty(property) {\n      return caseMap.camelToDashCase(property);\n    }\n\n    /**\n     * Overrides PropertiesChanged implementation to initialize values for\n     * accessors created for values that already existed on the element\n     * prototype.\n     *\n     * @return {void}\n     * @protected\n     */\n    _initializeProperties() {\n      if (this.__dataProto) {\n        this._initializeProtoProperties(this.__dataProto);\n        this.__dataProto = null;\n      }\n      super._initializeProperties();\n    }\n\n    /**\n     * Called at instance time with bag of properties that were overwritten\n     * by accessors on the prototype when accessors were created.\n     *\n     * The default implementation sets these properties back into the\n     * setter at instance time.  This method is provided as an override\n     * point for customizing or providing more efficient initialization.\n     *\n     * @param {Object} props Bag of property values that were overwritten\n     *   when creating property accessors.\n     * @return {void}\n     * @protected\n     */\n    _initializeProtoProperties(props) {\n      for (let p in props) {\n        this._setProperty(p, props[p]);\n      }\n    }\n\n    /**\n     * Ensures the element has the given attribute. If it does not,\n     * assigns the given value to the attribute.\n     *\n     * @suppress {invalidCasts} Closure can't figure out `this` is infact an element\n     *\n     * @param {string} attribute Name of attribute to ensure is set.\n     * @param {string} value of the attribute.\n     * @return {void}\n     */\n    _ensureAttribute(attribute, value) {\n      const el = /** @type {!HTMLElement} */(this);\n      if (!el.hasAttribute(attribute)) {\n        this._valueToNodeAttribute(el, value, attribute);\n      }\n    }\n\n    /**\n     * Overrides PropertiesChanged implemention to serialize objects as JSON.\n     *\n     * @param {*} value Property value to serialize.\n     * @return {string | undefined} String serialized from the provided property value.\n     */\n    _serializeValue(value) {\n      /* eslint-disable no-fallthrough */\n      switch (typeof value) {\n        case 'object':\n          if (value instanceof Date) {\n            return value.toString();\n          } else if (value) {\n            try {\n              return JSON.stringify(value);\n            } catch(x) {\n              return '';\n            }\n          }\n\n        default:\n          return super._serializeValue(value);\n      }\n    }\n\n    /**\n     * Converts a string to a typed JavaScript value.\n     *\n     * This method is called by Polymer when reading HTML attribute values to\n     * JS properties.  Users may override this method on Polymer element\n     * prototypes to provide deserialization for custom `type`s.  Note,\n     * the `type` argument is the value of the `type` field provided in the\n     * `properties` configuration object for a given property, and is\n     * by convention the constructor for the type to deserialize.\n     *\n     *\n     * @param {?string} value Attribute value to deserialize.\n     * @param {*=} type Type to deserialize the string to.\n     * @return {*} Typed value deserialized from the provided string.\n     */\n    _deserializeValue(value, type) {\n      /**\n       * @type {*}\n       */\n      let outValue;\n      switch (type) {\n        case Object:\n          try {\n            outValue = JSON.parse(/** @type {string} */(value));\n          } catch(x) {\n            // allow non-JSON literals like Strings and Numbers\n            outValue = value;\n          }\n          break;\n        case Array:\n          try {\n            outValue = JSON.parse(/** @type {string} */(value));\n          } catch(x) {\n            outValue = null;\n            console.warn(`Polymer::Attributes: couldn't decode Array as JSON: ${value}`);\n          }\n          break;\n        case Date:\n          outValue = isNaN(value) ? String(value) : Number(value);\n          outValue = new Date(outValue);\n          break;\n        default:\n          outValue = super._deserializeValue(value, type);\n          break;\n      }\n      return outValue;\n    }\n    /* eslint-enable no-fallthrough */\n\n    /**\n     * Overrides PropertiesChanged implementation to save existing prototype\n     * property value so that it can be reset.\n     * @param {string} property Name of the property\n     * @param {boolean=} readOnly When true, no setter is created\n     *\n     * When calling on a prototype, any overwritten values are saved in\n     * `__dataProto`, and it is up to the subclasser to decide how/when\n     * to set those properties back into the accessor.  When calling on an\n     * instance, the overwritten value is set via `_setPendingProperty`,\n     * and the user should call `_invalidateProperties` or `_flushProperties`\n     * for the values to take effect.\n     * @protected\n     * @return {void}\n     */\n    _definePropertyAccessor(property, readOnly) {\n      saveAccessorValue(this, property);\n      super._definePropertyAccessor(property, readOnly);\n    }\n\n    /**\n     * Returns true if this library created an accessor for the given property.\n     *\n     * @param {string} property Property name\n     * @return {boolean} True if an accessor was created\n     */\n    _hasAccessor(property) {\n      return this.__dataHasAccessor && this.__dataHasAccessor[property];\n    }\n\n    /**\n     * Returns true if the specified property has a pending change.\n     *\n     * @param {string} prop Property name\n     * @return {boolean} True if property has a pending change\n     * @protected\n     */\n    _isPropertyPending(prop) {\n      return Boolean(this.__dataPending && (prop in this.__dataPending));\n    }\n\n  }\n\n  return PropertyAccessors;\n\n});\n","/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\nimport '../utils/boot.js';\n\nimport { dedupingMixin } from '../utils/mixin.js';\n\n// 1.x backwards-compatible auto-wrapper for template type extensions\n// This is a clear layering violation and gives favored-nation status to\n// dom-if and dom-repeat templates.  This is a conceit we're choosing to keep\n// a.) to ease 1.x backwards-compatibility due to loss of `is`, and\n// b.) to maintain if/repeat capability in parser-constrained elements\n//     (e.g. table, select) in lieu of native CE type extensions without\n//     massive new invention in this space (e.g. directive system)\nconst templateExtensions = {\n  'dom-if': true,\n  'dom-repeat': true\n};\nfunction wrapTemplateExtension(node) {\n  let is = node.getAttribute('is');\n  if (is && templateExtensions[is]) {\n    let t = node;\n    t.removeAttribute('is');\n    node = t.ownerDocument.createElement(is);\n    t.parentNode.replaceChild(node, t);\n    node.appendChild(t);\n    while(t.attributes.length) {\n      node.setAttribute(t.attributes[0].name, t.attributes[0].value);\n      t.removeAttribute(t.attributes[0].name);\n    }\n  }\n  return node;\n}\n\nfunction findTemplateNode(root, nodeInfo) {\n  // recursively ascend tree until we hit root\n  let parent = nodeInfo.parentInfo && findTemplateNode(root, nodeInfo.parentInfo);\n  // unwind the stack, returning the indexed node at each level\n  if (parent) {\n    // note: marginally faster than indexing via childNodes\n    // (http://jsperf.com/childnodes-lookup)\n    for (let n=parent.firstChild, i=0; n; n=n.nextSibling) {\n      if (nodeInfo.parentIndex === i++) {\n        return n;\n      }\n    }\n  } else {\n    return root;\n  }\n}\n\n// construct `$` map (from id annotations)\nfunction applyIdToMap(inst, map, node, nodeInfo) {\n  if (nodeInfo.id) {\n    map[nodeInfo.id] = node;\n  }\n}\n\n// install event listeners (from event annotations)\nfunction applyEventListener(inst, node, nodeInfo) {\n  if (nodeInfo.events && nodeInfo.events.length) {\n    for (let j=0, e$=nodeInfo.events, e; (j<e$.length) && (e=e$[j]); j++) {\n      inst._addMethodEventListenerToNode(node, e.name, e.value, inst);\n    }\n  }\n}\n\n// push configuration references at configure time\nfunction applyTemplateContent(inst, node, nodeInfo) {\n  if (nodeInfo.templateInfo) {\n    node._templateInfo = nodeInfo.templateInfo;\n  }\n}\n\nfunction createNodeEventHandler(context, eventName, methodName) {\n  // Instances can optionally have a _methodHost which allows redirecting where\n  // to find methods. Currently used by `templatize`.\n  context = context._methodHost || context;\n  let handler = function(e) {\n    if (context[methodName]) {\n      context[methodName](e, e.detail);\n    } else {\n      console.warn('listener method `' + methodName + '` not defined');\n    }\n  };\n  return handler;\n}\n\n/**\n * Element mixin that provides basic template parsing and stamping, including\n * the following template-related features for stamped templates:\n *\n * - Declarative event listeners (`on-eventname=\"listener\"`)\n * - Map of node id's to stamped node instances (`this.$.id`)\n * - Nested template content caching/removal and re-installation (performance\n *   optimization)\n *\n * @mixinFunction\n * @polymer\n * @summary Element class mixin that provides basic template parsing and stamping\n */\nexport const TemplateStamp = dedupingMixin(superClass => {\n\n  /**\n   * @polymer\n   * @mixinClass\n   * @implements {Polymer_TemplateStamp}\n   */\n  class TemplateStamp extends superClass {\n\n    /**\n     * Scans a template to produce template metadata.\n     *\n     * Template-specific metadata are stored in the object returned, and node-\n     * specific metadata are stored in objects in its flattened `nodeInfoList`\n     * array.  Only nodes in the template that were parsed as nodes of\n     * interest contain an object in `nodeInfoList`.  Each `nodeInfo` object\n     * contains an `index` (`childNodes` index in parent) and optionally\n     * `parent`, which points to node info of its parent (including its index).\n     *\n     * The template metadata object returned from this method has the following\n     * structure (many fields optional):\n     *\n     * ```js\n     *   {\n     *     // Flattened list of node metadata (for nodes that generated metadata)\n     *     nodeInfoList: [\n     *       {\n     *         // `id` attribute for any nodes with id's for generating `$` map\n     *         id: {string},\n     *         // `on-event=\"handler\"` metadata\n     *         events: [\n     *           {\n     *             name: {string},   // event name\n     *             value: {string},  // handler method name\n     *           }, ...\n     *         ],\n     *         // Notes when the template contained a `<slot>` for shady DOM\n     *         // optimization purposes\n     *         hasInsertionPoint: {boolean},\n     *         // For nested `<template>`` nodes, nested template metadata\n     *         templateInfo: {object}, // nested template metadata\n     *         // Metadata to allow efficient retrieval of instanced node\n     *         // corresponding to this metadata\n     *         parentInfo: {number},   // reference to parent nodeInfo>\n     *         parentIndex: {number},  // index in parent's `childNodes` collection\n     *         infoIndex: {number},    // index of this `nodeInfo` in `templateInfo.nodeInfoList`\n     *       },\n     *       ...\n     *     ],\n     *     // When true, the template had the `strip-whitespace` attribute\n     *     // or was nested in a template with that setting\n     *     stripWhitespace: {boolean},\n     *     // For nested templates, nested template content is moved into\n     *     // a document fragment stored here; this is an optimization to\n     *     // avoid the cost of nested template cloning\n     *     content: {DocumentFragment}\n     *   }\n     * ```\n     *\n     * This method kicks off a recursive treewalk as follows:\n     *\n     * ```\n     *    _parseTemplate <---------------------+\n     *      _parseTemplateContent              |\n     *        _parseTemplateNode  <------------|--+\n     *          _parseTemplateNestedTemplate --+  |\n     *          _parseTemplateChildNodes ---------+\n     *          _parseTemplateNodeAttributes\n     *            _parseTemplateNodeAttribute\n     *\n     * ```\n     *\n     * These methods may be overridden to add custom metadata about templates\n     * to either `templateInfo` or `nodeInfo`.\n     *\n     * Note that this method may be destructive to the template, in that\n     * e.g. event annotations may be removed after being noted in the\n     * template metadata.\n     *\n     * @param {!HTMLTemplateElement} template Template to parse\n     * @param {TemplateInfo=} outerTemplateInfo Template metadata from the outer\n     *   template, for parsing nested templates\n     * @return {!TemplateInfo} Parsed template metadata\n     */\n    static _parseTemplate(template, outerTemplateInfo) {\n      // since a template may be re-used, memo-ize metadata\n      if (!template._templateInfo) {\n        let templateInfo = template._templateInfo = {};\n        templateInfo.nodeInfoList = [];\n        templateInfo.stripWhiteSpace =\n          (outerTemplateInfo && outerTemplateInfo.stripWhiteSpace) ||\n          template.hasAttribute('strip-whitespace');\n        this._parseTemplateContent(template, templateInfo, {parent: null});\n      }\n      return template._templateInfo;\n    }\n\n    static _parseTemplateContent(template, templateInfo, nodeInfo) {\n      return this._parseTemplateNode(template.content, templateInfo, nodeInfo);\n    }\n\n    /**\n     * Parses template node and adds template and node metadata based on\n     * the current node, and its `childNodes` and `attributes`.\n     *\n     * This method may be overridden to add custom node or template specific\n     * metadata based on this node.\n     *\n     * @param {Node} node Node to parse\n     * @param {!TemplateInfo} templateInfo Template metadata for current template\n     * @param {!NodeInfo} nodeInfo Node metadata for current template.\n     * @return {boolean} `true` if the visited node added node-specific\n     *   metadata to `nodeInfo`\n     */\n    static _parseTemplateNode(node, templateInfo, nodeInfo) {\n      let noted;\n      let element = /** @type {Element} */(node);\n      if (element.localName == 'template' && !element.hasAttribute('preserve-content')) {\n        noted = this._parseTemplateNestedTemplate(element, templateInfo, nodeInfo) || noted;\n      } else if (element.localName === 'slot') {\n        // For ShadyDom optimization, indicating there is an insertion point\n        templateInfo.hasInsertionPoint = true;\n      }\n      if (element.firstChild) {\n        noted = this._parseTemplateChildNodes(element, templateInfo, nodeInfo) || noted;\n      }\n      if (element.hasAttributes && element.hasAttributes()) {\n        noted = this._parseTemplateNodeAttributes(element, templateInfo, nodeInfo) || noted;\n      }\n      return noted;\n    }\n\n    /**\n     * Parses template child nodes for the given root node.\n     *\n     * This method also wraps whitelisted legacy template extensions\n     * (`is=\"dom-if\"` and `is=\"dom-repeat\"`) with their equivalent element\n     * wrappers, collapses text nodes, and strips whitespace from the template\n     * if the `templateInfo.stripWhitespace` setting was provided.\n     *\n     * @param {Node} root Root node whose `childNodes` will be parsed\n     * @param {!TemplateInfo} templateInfo Template metadata for current template\n     * @param {!NodeInfo} nodeInfo Node metadata for current template.\n     * @return {void}\n     */\n    static _parseTemplateChildNodes(root, templateInfo, nodeInfo) {\n      if (root.localName === 'script' || root.localName === 'style') {\n        return;\n      }\n      for (let node=root.firstChild, parentIndex=0, next; node; node=next) {\n        // Wrap templates\n        if (node.localName == 'template') {\n          node = wrapTemplateExtension(node);\n        }\n        // collapse adjacent textNodes: fixes an IE issue that can cause\n        // text nodes to be inexplicably split =(\n        // note that root.normalize() should work but does not so we do this\n        // manually.\n        next = node.nextSibling;\n        if (node.nodeType === Node.TEXT_NODE) {\n          let /** Node */ n = next;\n          while (n && (n.nodeType === Node.TEXT_NODE)) {\n            node.textContent += n.textContent;\n            next = n.nextSibling;\n            root.removeChild(n);\n            n = next;\n          }\n          // optionally strip whitespace\n          if (templateInfo.stripWhiteSpace && !node.textContent.trim()) {\n            root.removeChild(node);\n            continue;\n          }\n        }\n        let childInfo = { parentIndex, parentInfo: nodeInfo };\n        if (this._parseTemplateNode(node, templateInfo, childInfo)) {\n          childInfo.infoIndex = templateInfo.nodeInfoList.push(/** @type {!NodeInfo} */(childInfo)) - 1;\n        }\n        // Increment if not removed\n        if (node.parentNode) {\n          parentIndex++;\n        }\n      }\n    }\n\n    /**\n     * Parses template content for the given nested `<template>`.\n     *\n     * Nested template info is stored as `templateInfo` in the current node's\n     * `nodeInfo`. `template.content` is removed and stored in `templateInfo`.\n     * It will then be the responsibility of the host to set it back to the\n     * template and for users stamping nested templates to use the\n     * `_contentForTemplate` method to retrieve the content for this template\n     * (an optimization to avoid the cost of cloning nested template content).\n     *\n     * @param {HTMLTemplateElement} node Node to parse (a <template>)\n     * @param {TemplateInfo} outerTemplateInfo Template metadata for current template\n     *   that includes the template `node`\n     * @param {!NodeInfo} nodeInfo Node metadata for current template.\n     * @return {boolean} `true` if the visited node added node-specific\n     *   metadata to `nodeInfo`\n     */\n    static _parseTemplateNestedTemplate(node, outerTemplateInfo, nodeInfo) {\n      let templateInfo = this._parseTemplate(node, outerTemplateInfo);\n      let content = templateInfo.content =\n        node.content.ownerDocument.createDocumentFragment();\n      content.appendChild(node.content);\n      nodeInfo.templateInfo = templateInfo;\n      return true;\n    }\n\n    /**\n     * Parses template node attributes and adds node metadata to `nodeInfo`\n     * for nodes of interest.\n     *\n     * @param {Element} node Node to parse\n     * @param {TemplateInfo} templateInfo Template metadata for current template\n     * @param {NodeInfo} nodeInfo Node metadata for current template.\n     * @return {boolean} `true` if the visited node added node-specific\n     *   metadata to `nodeInfo`\n     */\n    static _parseTemplateNodeAttributes(node, templateInfo, nodeInfo) {\n      // Make copy of original attribute list, since the order may change\n      // as attributes are added and removed\n      let noted = false;\n      let attrs = Array.from(node.attributes);\n      for (let i=attrs.length-1, a; (a=attrs[i]); i--) {\n        noted = this._parseTemplateNodeAttribute(node, templateInfo, nodeInfo, a.name, a.value) || noted;\n      }\n      return noted;\n    }\n\n    /**\n     * Parses a single template node attribute and adds node metadata to\n     * `nodeInfo` for attributes of interest.\n     *\n     * This implementation adds metadata for `on-event=\"handler\"` attributes\n     * and `id` attributes.\n     *\n     * @param {Element} node Node to parse\n     * @param {!TemplateInfo} templateInfo Template metadata for current template\n     * @param {!NodeInfo} nodeInfo Node metadata for current template.\n     * @param {string} name Attribute name\n     * @param {string} value Attribute value\n     * @return {boolean} `true` if the visited node added node-specific\n     *   metadata to `nodeInfo`\n     */\n    static _parseTemplateNodeAttribute(node, templateInfo, nodeInfo, name, value) {\n      // events (on-*)\n      if (name.slice(0, 3) === 'on-') {\n        node.removeAttribute(name);\n        nodeInfo.events = nodeInfo.events || [];\n        nodeInfo.events.push({\n          name: name.slice(3),\n          value\n        });\n        return true;\n      }\n      // static id\n      else if (name === 'id') {\n        nodeInfo.id = value;\n        return true;\n      }\n      return false;\n    }\n\n    /**\n     * Returns the `content` document fragment for a given template.\n     *\n     * For nested templates, Polymer performs an optimization to cache nested\n     * template content to avoid the cost of cloning deeply nested templates.\n     * This method retrieves the cached content for a given template.\n     *\n     * @param {HTMLTemplateElement} template Template to retrieve `content` for\n     * @return {DocumentFragment} Content fragment\n     */\n    static _contentForTemplate(template) {\n      let templateInfo = /** @type {HTMLTemplateElementWithInfo} */ (template)._templateInfo;\n      return (templateInfo && templateInfo.content) || template.content;\n    }\n\n    /**\n     * Clones the provided template content and returns a document fragment\n     * containing the cloned dom.\n     *\n     * The template is parsed (once and memoized) using this library's\n     * template parsing features, and provides the following value-added\n     * features:\n     * * Adds declarative event listeners for `on-event=\"handler\"` attributes\n     * * Generates an \"id map\" for all nodes with id's under `$` on returned\n     *   document fragment\n     * * Passes template info including `content` back to templates as\n     *   `_templateInfo` (a performance optimization to avoid deep template\n     *   cloning)\n     *\n     * Note that the memoized template parsing process is destructive to the\n     * template: attributes for bindings and declarative event listeners are\n     * removed after being noted in notes, and any nested `<template>.content`\n     * is removed and stored in notes as well.\n     *\n     * @param {!HTMLTemplateElement} template Template to stamp\n     * @return {!StampedTemplate} Cloned template content\n     */\n    _stampTemplate(template) {\n      // Polyfill support: bootstrap the template if it has not already been\n      if (template && !template.content &&\n          window.HTMLTemplateElement && HTMLTemplateElement.decorate) {\n        HTMLTemplateElement.decorate(template);\n      }\n      let templateInfo = this.constructor._parseTemplate(template);\n      let nodeInfo = templateInfo.nodeInfoList;\n      let content = templateInfo.content || template.content;\n      let dom = /** @type {DocumentFragment} */ (document.importNode(content, true));\n      // NOTE: ShadyDom optimization indicating there is an insertion point\n      dom.__noInsertionPoint = !templateInfo.hasInsertionPoint;\n      let nodes = dom.nodeList = new Array(nodeInfo.length);\n      dom.$ = {};\n      for (let i=0, l=nodeInfo.length, info; (i<l) && (info=nodeInfo[i]); i++) {\n        let node = nodes[i] = findTemplateNode(dom, info);\n        applyIdToMap(this, dom.$, node, info);\n        applyTemplateContent(this, node, info);\n        applyEventListener(this, node, info);\n      }\n      dom = /** @type {!StampedTemplate} */(dom); // eslint-disable-line no-self-assign\n      return dom;\n    }\n\n    /**\n     * Adds an event listener by method name for the event provided.\n     *\n     * This method generates a handler function that looks up the method\n     * name at handling time.\n     *\n     * @param {!Node} node Node to add listener on\n     * @param {string} eventName Name of event\n     * @param {string} methodName Name of method\n     * @param {*=} context Context the method will be called on (defaults\n     *   to `node`)\n     * @return {Function} Generated handler function\n     */\n    _addMethodEventListenerToNode(node, eventName, methodName, context) {\n      context = context || node;\n      let handler = createNodeEventHandler(context, eventName, methodName);\n      this._addEventListenerToNode(node, eventName, handler);\n      return handler;\n    }\n\n    /**\n     * Override point for adding custom or simulated event handling.\n     *\n     * @param {!Node} node Node to add event listener to\n     * @param {string} eventName Name of event\n     * @param {function(!Event):void} handler Listener function to add\n     * @return {void}\n     */\n    _addEventListenerToNode(node, eventName, handler) {\n      node.addEventListener(eventName, handler);\n    }\n\n    /**\n     * Override point for adding custom or simulated event handling.\n     *\n     * @param {Node} node Node to remove event listener from\n     * @param {string} eventName Name of event\n     * @param {function(!Event):void} handler Listener function to remove\n     * @return {void}\n     */\n    _removeEventListenerFromNode(node, eventName, handler) {\n      node.removeEventListener(eventName, handler);\n    }\n\n  }\n\n  return TemplateStamp;\n\n});\n","/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\nimport '../utils/boot.js';\n\nimport { dedupingMixin } from '../utils/mixin.js';\nimport { root as root$0, isAncestor, isDescendant, get as get$0, translate, isPath as isPath$0, set as set$0, normalize } from '../utils/path.js';\n/* for notify, reflect */\nimport * as caseMap from '../utils/case-map.js';\nimport { camelToDashCase as camelToDashCase$0, dashToCamelCase } from '../utils/case-map.js';\nimport { PropertyAccessors } from './property-accessors.js';\n/* for annotated effects */\nimport { TemplateStamp } from './template-stamp.js';\nimport { sanitizeDOMValue } from '../utils/settings.js';\n\n/** @const {Object} */\nconst CaseMap = caseMap;\n\n// Monotonically increasing unique ID used for de-duping effects triggered\n// from multiple properties in the same turn\nlet dedupeId = 0;\n\n/**\n * Property effect types; effects are stored on the prototype using these keys\n * @enum {string}\n */\nconst TYPES = {\n  COMPUTE: '__computeEffects',\n  REFLECT: '__reflectEffects',\n  NOTIFY: '__notifyEffects',\n  PROPAGATE: '__propagateEffects',\n  OBSERVE: '__observeEffects',\n  READ_ONLY: '__readOnly'\n};\n\n/** @const {RegExp} */\nconst capitalAttributeRegex = /[A-Z]/;\n\n/**\n * @typedef {{\n * name: (string | undefined),\n * structured: (boolean | undefined),\n * wildcard: (boolean | undefined)\n * }}\n */\nlet DataTrigger; //eslint-disable-line no-unused-vars\n\n/**\n * @typedef {{\n * info: ?,\n * trigger: (!DataTrigger | undefined),\n * fn: (!Function | undefined)\n * }}\n */\nlet DataEffect; //eslint-disable-line no-unused-vars\n\nlet PropertyEffectsType; //eslint-disable-line no-unused-vars\n\n/**\n * Ensures that the model has an own-property map of effects for the given type.\n * The model may be a prototype or an instance.\n *\n * Property effects are stored as arrays of effects by property in a map,\n * by named type on the model. e.g.\n *\n *   __computeEffects: {\n *     foo: [ ... ],\n *     bar: [ ... ]\n *   }\n *\n * If the model does not yet have an effect map for the type, one is created\n * and returned.  If it does, but it is not an own property (i.e. the\n * prototype had effects), the the map is deeply cloned and the copy is\n * set on the model and returned, ready for new effects to be added.\n *\n * @param {Object} model Prototype or instance\n * @param {string} type Property effect type\n * @return {Object} The own-property map of effects for the given type\n * @private\n */\nfunction ensureOwnEffectMap(model, type) {\n  let effects = model[type];\n  if (!effects) {\n    effects = model[type] = {};\n  } else if (!model.hasOwnProperty(type)) {\n    effects = model[type] = Object.create(model[type]);\n    for (let p in effects) {\n      let protoFx = effects[p];\n      let instFx = effects[p] = Array(protoFx.length);\n      for (let i=0; i<protoFx.length; i++) {\n        instFx[i] = protoFx[i];\n      }\n    }\n  }\n  return effects;\n}\n\n// -- effects ----------------------------------------------\n\n/**\n * Runs all effects of a given type for the given set of property changes\n * on an instance.\n *\n * @param {!PropertyEffectsType} inst The instance with effects to run\n * @param {Object} effects Object map of property-to-Array of effects\n * @param {Object} props Bag of current property changes\n * @param {Object=} oldProps Bag of previous values for changed properties\n * @param {boolean=} hasPaths True with `props` contains one or more paths\n * @param {*=} extraArgs Additional metadata to pass to effect function\n * @return {boolean} True if an effect ran for this property\n * @private\n */\nfunction runEffects(inst, effects, props, oldProps, hasPaths, extraArgs) {\n  if (effects) {\n    let ran = false;\n    let id = dedupeId++;\n    for (let prop in props) {\n      if (runEffectsForProperty(inst, effects, id, prop, props, oldProps, hasPaths, extraArgs)) {\n        ran = true;\n      }\n    }\n    return ran;\n  }\n  return false;\n}\n\n/**\n * Runs a list of effects for a given property.\n *\n * @param {!PropertyEffectsType} inst The instance with effects to run\n * @param {Object} effects Object map of property-to-Array of effects\n * @param {number} dedupeId Counter used for de-duping effects\n * @param {string} prop Name of changed property\n * @param {*} props Changed properties\n * @param {*} oldProps Old properties\n * @param {boolean=} hasPaths True with `props` contains one or more paths\n * @param {*=} extraArgs Additional metadata to pass to effect function\n * @return {boolean} True if an effect ran for this property\n * @private\n */\nfunction runEffectsForProperty(inst, effects, dedupeId, prop, props, oldProps, hasPaths, extraArgs) {\n  let ran = false;\n  let rootProperty = hasPaths ? root$0(prop) : prop;\n  let fxs = effects[rootProperty];\n  if (fxs) {\n    for (let i=0, l=fxs.length, fx; (i<l) && (fx=fxs[i]); i++) {\n      if ((!fx.info || fx.info.lastRun !== dedupeId) &&\n          (!hasPaths || pathMatchesTrigger(prop, fx.trigger))) {\n        if (fx.info) {\n          fx.info.lastRun = dedupeId;\n        }\n        fx.fn(inst, prop, props, oldProps, fx.info, hasPaths, extraArgs);\n        ran = true;\n      }\n    }\n  }\n  return ran;\n}\n\n/**\n * Determines whether a property/path that has changed matches the trigger\n * criteria for an effect.  A trigger is a descriptor with the following\n * structure, which matches the descriptors returned from `parseArg`.\n * e.g. for `foo.bar.*`:\n * ```\n * trigger: {\n *   name: 'a.b',\n *   structured: true,\n *   wildcard: true\n * }\n * ```\n * If no trigger is given, the path is deemed to match.\n *\n * @param {string} path Path or property that changed\n * @param {DataTrigger} trigger Descriptor\n * @return {boolean} Whether the path matched the trigger\n */\nfunction pathMatchesTrigger(path, trigger) {\n  if (trigger) {\n    let triggerPath = trigger.name;\n    return (triggerPath == path) ||\n      (trigger.structured && isAncestor(triggerPath, path)) ||\n      (trigger.wildcard && isDescendant(triggerPath, path));\n  } else {\n    return true;\n  }\n}\n\n/**\n * Implements the \"observer\" effect.\n *\n * Calls the method with `info.methodName` on the instance, passing the\n * new and old values.\n *\n * @param {!PropertyEffectsType} inst The instance the effect will be run on\n * @param {string} property Name of property\n * @param {Object} props Bag of current property changes\n * @param {Object} oldProps Bag of previous values for changed properties\n * @param {?} info Effect metadata\n * @return {void}\n * @private\n */\nfunction runObserverEffect(inst, property, props, oldProps, info) {\n  let fn = typeof info.method === \"string\" ? inst[info.method] : info.method;\n  let changedProp = info.property;\n  if (fn) {\n    fn.call(inst, inst.__data[changedProp], oldProps[changedProp]);\n  } else if (!info.dynamicFn) {\n    console.warn('observer method `' + info.method + '` not defined');\n  }\n}\n\n/**\n * Runs \"notify\" effects for a set of changed properties.\n *\n * This method differs from the generic `runEffects` method in that it\n * will dispatch path notification events in the case that the property\n * changed was a path and the root property for that path didn't have a\n * \"notify\" effect.  This is to maintain 1.0 behavior that did not require\n * `notify: true` to ensure object sub-property notifications were\n * sent.\n *\n * @param {!PropertyEffectsType} inst The instance with effects to run\n * @param {Object} notifyProps Bag of properties to notify\n * @param {Object} props Bag of current property changes\n * @param {Object} oldProps Bag of previous values for changed properties\n * @param {boolean} hasPaths True with `props` contains one or more paths\n * @return {void}\n * @private\n */\nfunction runNotifyEffects(inst, notifyProps, props, oldProps, hasPaths) {\n  // Notify\n  let fxs = inst[TYPES.NOTIFY];\n  let notified;\n  let id = dedupeId++;\n  // Try normal notify effects; if none, fall back to try path notification\n  for (let prop in notifyProps) {\n    if (notifyProps[prop]) {\n      if (fxs && runEffectsForProperty(inst, fxs, id, prop, props, oldProps, hasPaths)) {\n        notified = true;\n      } else if (hasPaths && notifyPath(inst, prop, props)) {\n        notified = true;\n      }\n    }\n  }\n  // Flush host if we actually notified and host was batching\n  // And the host has already initialized clients; this prevents\n  // an issue with a host observing data changes before clients are ready.\n  let host;\n  if (notified && (host = inst.__dataHost) && host._invalidateProperties) {\n    host._invalidateProperties();\n  }\n}\n\n/**\n * Dispatches {property}-changed events with path information in the detail\n * object to indicate a sub-path of the property was changed.\n *\n * @param {!PropertyEffectsType} inst The element from which to fire the event\n * @param {string} path The path that was changed\n * @param {Object} props Bag of current property changes\n * @return {boolean} Returns true if the path was notified\n * @private\n */\nfunction notifyPath(inst, path, props) {\n  let rootProperty = root$0(path);\n  if (rootProperty !== path) {\n    let eventName = camelToDashCase$0(rootProperty) + '-changed';\n    dispatchNotifyEvent(inst, eventName, props[path], path);\n    return true;\n  }\n  return false;\n}\n\n/**\n * Dispatches {property}-changed events to indicate a property (or path)\n * changed.\n *\n * @param {!PropertyEffectsType} inst The element from which to fire the event\n * @param {string} eventName The name of the event to send ('{property}-changed')\n * @param {*} value The value of the changed property\n * @param {string | null | undefined} path If a sub-path of this property changed, the path\n *   that changed (optional).\n * @return {void}\n * @private\n * @suppress {invalidCasts}\n */\nfunction dispatchNotifyEvent(inst, eventName, value, path) {\n  let detail = {\n    value: value,\n    queueProperty: true\n  };\n  if (path) {\n    detail.path = path;\n  }\n  /** @type {!HTMLElement} */(inst).dispatchEvent(new CustomEvent(eventName, { detail }));\n}\n\n/**\n * Implements the \"notify\" effect.\n *\n * Dispatches a non-bubbling event named `info.eventName` on the instance\n * with a detail object containing the new `value`.\n *\n * @param {!PropertyEffectsType} inst The instance the effect will be run on\n * @param {string} property Name of property\n * @param {Object} props Bag of current property changes\n * @param {Object} oldProps Bag of previous values for changed properties\n * @param {?} info Effect metadata\n * @param {boolean} hasPaths True with `props` contains one or more paths\n * @return {void}\n * @private\n */\nfunction runNotifyEffect(inst, property, props, oldProps, info, hasPaths) {\n  let rootProperty = hasPaths ? root$0(property) : property;\n  let path = rootProperty != property ? property : null;\n  let value = path ? get$0(inst, path) : inst.__data[property];\n  if (path && value === undefined) {\n    value = props[property];  // specifically for .splices\n  }\n  dispatchNotifyEvent(inst, info.eventName, value, path);\n}\n\n/**\n * Handler function for 2-way notification events. Receives context\n * information captured in the `addNotifyListener` closure from the\n * `__notifyListeners` metadata.\n *\n * Sets the value of the notified property to the host property or path.  If\n * the event contained path information, translate that path to the host\n * scope's name for that path first.\n *\n * @param {CustomEvent} event Notification event (e.g. '<property>-changed')\n * @param {!PropertyEffectsType} inst Host element instance handling the notification event\n * @param {string} fromProp Child element property that was bound\n * @param {string} toPath Host property/path that was bound\n * @param {boolean} negate Whether the binding was negated\n * @return {void}\n * @private\n */\nfunction handleNotification(event, inst, fromProp, toPath, negate) {\n  let value;\n  let detail = /** @type {Object} */(event.detail);\n  let fromPath = detail && detail.path;\n  if (fromPath) {\n    toPath = translate(fromProp, toPath, fromPath);\n    value = detail && detail.value;\n  } else {\n    value = event.target[fromProp];\n  }\n  value = negate ? !value : value;\n  if (!inst[TYPES.READ_ONLY] || !inst[TYPES.READ_ONLY][toPath]) {\n    if (inst._setPendingPropertyOrPath(toPath, value, true, Boolean(fromPath))\n      && (!detail || !detail.queueProperty)) {\n      inst._invalidateProperties();\n    }\n  }\n}\n\n/**\n * Implements the \"reflect\" effect.\n *\n * Sets the attribute named `info.attrName` to the given property value.\n *\n * @param {!PropertyEffectsType} inst The instance the effect will be run on\n * @param {string} property Name of property\n * @param {Object} props Bag of current property changes\n * @param {Object} oldProps Bag of previous values for changed properties\n * @param {?} info Effect metadata\n * @return {void}\n * @private\n */\nfunction runReflectEffect(inst, property, props, oldProps, info) {\n  let value = inst.__data[property];\n  if (sanitizeDOMValue) {\n    value = sanitizeDOMValue(value, info.attrName, 'attribute', /** @type {Node} */(inst));\n  }\n  inst._propertyToAttribute(property, info.attrName, value);\n}\n\n/**\n * Runs \"computed\" effects for a set of changed properties.\n *\n * This method differs from the generic `runEffects` method in that it\n * continues to run computed effects based on the output of each pass until\n * there are no more newly computed properties.  This ensures that all\n * properties that will be computed by the initial set of changes are\n * computed before other effects (binding propagation, observers, and notify)\n * run.\n *\n * @param {!PropertyEffectsType} inst The instance the effect will be run on\n * @param {!Object} changedProps Bag of changed properties\n * @param {!Object} oldProps Bag of previous values for changed properties\n * @param {boolean} hasPaths True with `props` contains one or more paths\n * @return {void}\n * @private\n */\nfunction runComputedEffects(inst, changedProps, oldProps, hasPaths) {\n  let computeEffects = inst[TYPES.COMPUTE];\n  if (computeEffects) {\n    let inputProps = changedProps;\n    while (runEffects(inst, computeEffects, inputProps, oldProps, hasPaths)) {\n      Object.assign(oldProps, inst.__dataOld);\n      Object.assign(changedProps, inst.__dataPending);\n      inputProps = inst.__dataPending;\n      inst.__dataPending = null;\n    }\n  }\n}\n\n/**\n * Implements the \"computed property\" effect by running the method with the\n * values of the arguments specified in the `info` object and setting the\n * return value to the computed property specified.\n *\n * @param {!PropertyEffectsType} inst The instance the effect will be run on\n * @param {string} property Name of property\n * @param {Object} props Bag of current property changes\n * @param {Object} oldProps Bag of previous values for changed properties\n * @param {?} info Effect metadata\n * @return {void}\n * @private\n */\nfunction runComputedEffect(inst, property, props, oldProps, info) {\n  let result = runMethodEffect(inst, property, props, oldProps, info);\n  let computedProp = info.methodInfo;\n  if (inst.__dataHasAccessor && inst.__dataHasAccessor[computedProp]) {\n    inst._setPendingProperty(computedProp, result, true);\n  } else {\n    inst[computedProp] = result;\n  }\n}\n\n/**\n * Computes path changes based on path links set up using the `linkPaths`\n * API.\n *\n * @param {!PropertyEffectsType} inst The instance whose props are changing\n * @param {string | !Array<(string|number)>} path Path that has changed\n * @param {*} value Value of changed path\n * @return {void}\n * @private\n */\nfunction computeLinkedPaths(inst, path, value) {\n  let links = inst.__dataLinkedPaths;\n  if (links) {\n    let link;\n    for (let a in links) {\n      let b = links[a];\n      if (isDescendant(a, path)) {\n        link = translate(a, b, path);\n        inst._setPendingPropertyOrPath(link, value, true, true);\n      } else if (isDescendant(b, path)) {\n        link = translate(b, a, path);\n        inst._setPendingPropertyOrPath(link, value, true, true);\n      }\n    }\n  }\n}\n\n// -- bindings ----------------------------------------------\n\n/**\n * Adds binding metadata to the current `nodeInfo`, and binding effects\n * for all part dependencies to `templateInfo`.\n *\n * @param {Function} constructor Class that `_parseTemplate` is currently\n *   running on\n * @param {TemplateInfo} templateInfo Template metadata for current template\n * @param {NodeInfo} nodeInfo Node metadata for current template node\n * @param {string} kind Binding kind, either 'property', 'attribute', or 'text'\n * @param {string} target Target property name\n * @param {!Array<!BindingPart>} parts Array of binding part metadata\n * @param {string=} literal Literal text surrounding binding parts (specified\n *   only for 'property' bindings, since these must be initialized as part\n *   of boot-up)\n * @return {void}\n * @private\n */\nfunction addBinding(constructor, templateInfo, nodeInfo, kind, target, parts, literal) {\n  // Create binding metadata and add to nodeInfo\n  nodeInfo.bindings = nodeInfo.bindings || [];\n  let /** Binding */ binding = { kind, target, parts, literal, isCompound: (parts.length !== 1) };\n  nodeInfo.bindings.push(binding);\n  // Add listener info to binding metadata\n  if (shouldAddListener(binding)) {\n    let {event, negate} = binding.parts[0];\n    binding.listenerEvent = event || (CaseMap.camelToDashCase(target) + '-changed');\n    binding.listenerNegate = negate;\n  }\n  // Add \"propagate\" property effects to templateInfo\n  let index = templateInfo.nodeInfoList.length;\n  for (let i=0; i<binding.parts.length; i++) {\n    let part = binding.parts[i];\n    part.compoundIndex = i;\n    addEffectForBindingPart(constructor, templateInfo, binding, part, index);\n  }\n}\n\n/**\n * Adds property effects to the given `templateInfo` for the given binding\n * part.\n *\n * @param {Function} constructor Class that `_parseTemplate` is currently\n *   running on\n * @param {TemplateInfo} templateInfo Template metadata for current template\n * @param {!Binding} binding Binding metadata\n * @param {!BindingPart} part Binding part metadata\n * @param {number} index Index into `nodeInfoList` for this node\n * @return {void}\n */\nfunction addEffectForBindingPart(constructor, templateInfo, binding, part, index) {\n  if (!part.literal) {\n    if (binding.kind === 'attribute' && binding.target[0] === '-') {\n      console.warn('Cannot set attribute ' + binding.target +\n        ' because \"-\" is not a valid attribute starting character');\n    } else {\n      let dependencies = part.dependencies;\n      let info = { index, binding, part, evaluator: constructor };\n      for (let j=0; j<dependencies.length; j++) {\n        let trigger = dependencies[j];\n        if (typeof trigger == 'string') {\n          trigger = parseArg(trigger);\n          trigger.wildcard = true;\n        }\n        constructor._addTemplatePropertyEffect(templateInfo, trigger.rootProperty, {\n          fn: runBindingEffect,\n          info, trigger\n        });\n      }\n    }\n  }\n}\n\n/**\n * Implements the \"binding\" (property/path binding) effect.\n *\n * Note that binding syntax is overridable via `_parseBindings` and\n * `_evaluateBinding`.  This method will call `_evaluateBinding` for any\n * non-literal parts returned from `_parseBindings`.  However,\n * there is no support for _path_ bindings via custom binding parts,\n * as this is specific to Polymer's path binding syntax.\n *\n * @param {!PropertyEffectsType} inst The instance the effect will be run on\n * @param {string} path Name of property\n * @param {Object} props Bag of current property changes\n * @param {Object} oldProps Bag of previous values for changed properties\n * @param {?} info Effect metadata\n * @param {boolean} hasPaths True with `props` contains one or more paths\n * @param {Array} nodeList List of nodes associated with `nodeInfoList` template\n *   metadata\n * @return {void}\n * @private\n */\nfunction runBindingEffect(inst, path, props, oldProps, info, hasPaths, nodeList) {\n  let node = nodeList[info.index];\n  let binding = info.binding;\n  let part = info.part;\n  // Subpath notification: transform path and set to client\n  // e.g.: foo=\"{{obj.sub}}\", path: 'obj.sub.prop', set 'foo.prop'=obj.sub.prop\n  if (hasPaths && part.source && (path.length > part.source.length) &&\n      (binding.kind == 'property') && !binding.isCompound &&\n      node.__isPropertyEffectsClient &&\n      node.__dataHasAccessor && node.__dataHasAccessor[binding.target]) {\n    let value = props[path];\n    path = translate(part.source, binding.target, path);\n    if (node._setPendingPropertyOrPath(path, value, false, true)) {\n      inst._enqueueClient(node);\n    }\n  } else {\n    let value = info.evaluator._evaluateBinding(inst, part, path, props, oldProps, hasPaths);\n    // Propagate value to child\n    applyBindingValue(inst, node, binding, part, value);\n  }\n}\n\n/**\n * Sets the value for an \"binding\" (binding) effect to a node,\n * either as a property or attribute.\n *\n * @param {!PropertyEffectsType} inst The instance owning the binding effect\n * @param {Node} node Target node for binding\n * @param {!Binding} binding Binding metadata\n * @param {!BindingPart} part Binding part metadata\n * @param {*} value Value to set\n * @return {void}\n * @private\n */\nfunction applyBindingValue(inst, node, binding, part, value) {\n  value = computeBindingValue(node, value, binding, part);\n  if (sanitizeDOMValue) {\n    value = sanitizeDOMValue(value, binding.target, binding.kind, node);\n  }\n  if (binding.kind == 'attribute') {\n    // Attribute binding\n    inst._valueToNodeAttribute(/** @type {Element} */(node), value, binding.target);\n  } else {\n    // Property binding\n    let prop = binding.target;\n    if (node.__isPropertyEffectsClient &&\n        node.__dataHasAccessor && node.__dataHasAccessor[prop]) {\n      if (!node[TYPES.READ_ONLY] || !node[TYPES.READ_ONLY][prop]) {\n        if (node._setPendingProperty(prop, value)) {\n          inst._enqueueClient(node);\n        }\n      }\n    } else  {\n      inst._setUnmanagedPropertyToNode(node, prop, value);\n    }\n  }\n}\n\n/**\n * Transforms an \"binding\" effect value based on compound & negation\n * effect metadata, as well as handling for special-case properties\n *\n * @param {Node} node Node the value will be set to\n * @param {*} value Value to set\n * @param {!Binding} binding Binding metadata\n * @param {!BindingPart} part Binding part metadata\n * @return {*} Transformed value to set\n * @private\n */\nfunction computeBindingValue(node, value, binding, part) {\n  if (binding.isCompound) {\n    let storage = node.__dataCompoundStorage[binding.target];\n    storage[part.compoundIndex] = value;\n    value = storage.join('');\n  }\n  if (binding.kind !== 'attribute') {\n    // Some browsers serialize `undefined` to `\"undefined\"`\n    if (binding.target === 'textContent' ||\n        (binding.target === 'value' &&\n          (node.localName === 'input' || node.localName === 'textarea'))) {\n      value = value == undefined ? '' : value;\n    }\n  }\n  return value;\n}\n\n/**\n * Returns true if a binding's metadata meets all the requirements to allow\n * 2-way binding, and therefore a `<property>-changed` event listener should be\n * added:\n * - used curly braces\n * - is a property (not attribute) binding\n * - is not a textContent binding\n * - is not compound\n *\n * @param {!Binding} binding Binding metadata\n * @return {boolean} True if 2-way listener should be added\n * @private\n */\nfunction shouldAddListener(binding) {\n  return Boolean(binding.target) &&\n         binding.kind != 'attribute' &&\n         binding.kind != 'text' &&\n         !binding.isCompound &&\n         binding.parts[0].mode === '{';\n}\n\n/**\n * Setup compound binding storage structures, notify listeners, and dataHost\n * references onto the bound nodeList.\n *\n * @param {!PropertyEffectsType} inst Instance that bas been previously bound\n * @param {TemplateInfo} templateInfo Template metadata\n * @return {void}\n * @private\n */\nfunction setupBindings(inst, templateInfo) {\n  // Setup compound storage, dataHost, and notify listeners\n  let {nodeList, nodeInfoList} = templateInfo;\n  if (nodeInfoList.length) {\n    for (let i=0; i < nodeInfoList.length; i++) {\n      let info = nodeInfoList[i];\n      let node = nodeList[i];\n      let bindings = info.bindings;\n      if (bindings) {\n        for (let i=0; i<bindings.length; i++) {\n          let binding = bindings[i];\n          setupCompoundStorage(node, binding);\n          addNotifyListener(node, inst, binding);\n        }\n      }\n      node.__dataHost = inst;\n    }\n  }\n}\n\n/**\n * Initializes `__dataCompoundStorage` local storage on a bound node with\n * initial literal data for compound bindings, and sets the joined\n * literal parts to the bound property.\n *\n * When changes to compound parts occur, they are first set into the compound\n * storage array for that property, and then the array is joined to result in\n * the final value set to the property/attribute.\n *\n * @param {Node} node Bound node to initialize\n * @param {Binding} binding Binding metadata\n * @return {void}\n * @private\n */\nfunction setupCompoundStorage(node, binding) {\n  if (binding.isCompound) {\n    // Create compound storage map\n    let storage = node.__dataCompoundStorage ||\n      (node.__dataCompoundStorage = {});\n    let parts = binding.parts;\n    // Copy literals from parts into storage for this binding\n    let literals = new Array(parts.length);\n    for (let j=0; j<parts.length; j++) {\n      literals[j] = parts[j].literal;\n    }\n    let target = binding.target;\n    storage[target] = literals;\n    // Configure properties with their literal parts\n    if (binding.literal && binding.kind == 'property') {\n      node[target] = binding.literal;\n    }\n  }\n}\n\n/**\n * Adds a 2-way binding notification event listener to the node specified\n *\n * @param {Object} node Child element to add listener to\n * @param {!PropertyEffectsType} inst Host element instance to handle notification event\n * @param {Binding} binding Binding metadata\n * @return {void}\n * @private\n */\nfunction addNotifyListener(node, inst, binding) {\n  if (binding.listenerEvent) {\n    let part = binding.parts[0];\n    node.addEventListener(binding.listenerEvent, function(e) {\n      handleNotification(e, inst, binding.target, part.source, part.negate);\n    });\n  }\n}\n\n// -- for method-based effects (complexObserver & computed) --------------\n\n/**\n * Adds property effects for each argument in the method signature (and\n * optionally, for the method name if `dynamic` is true) that calls the\n * provided effect function.\n *\n * @param {Element | Object} model Prototype or instance\n * @param {!MethodSignature} sig Method signature metadata\n * @param {string} type Type of property effect to add\n * @param {Function} effectFn Function to run when arguments change\n * @param {*=} methodInfo Effect-specific information to be included in\n *   method effect metadata\n * @param {boolean|Object=} dynamicFn Boolean or object map indicating whether\n *   method names should be included as a dependency to the effect. Note,\n *   defaults to true if the signature is static (sig.static is true).\n * @return {void}\n * @private\n */\nfunction createMethodEffect(model, sig, type, effectFn, methodInfo, dynamicFn) {\n  dynamicFn = sig.static || (dynamicFn &&\n    (typeof dynamicFn !== 'object' || dynamicFn[sig.methodName]));\n  let info = {\n    methodName: sig.methodName,\n    args: sig.args,\n    methodInfo,\n    dynamicFn\n  };\n  for (let i=0, arg; (i<sig.args.length) && (arg=sig.args[i]); i++) {\n    if (!arg.literal) {\n      model._addPropertyEffect(arg.rootProperty, type, {\n        fn: effectFn, info: info, trigger: arg\n      });\n    }\n  }\n  if (dynamicFn) {\n    model._addPropertyEffect(sig.methodName, type, {\n      fn: effectFn, info: info\n    });\n  }\n}\n\n/**\n * Calls a method with arguments marshaled from properties on the instance\n * based on the method signature contained in the effect metadata.\n *\n * Multi-property observers, computed properties, and inline computing\n * functions call this function to invoke the method, then use the return\n * value accordingly.\n *\n * @param {!PropertyEffectsType} inst The instance the effect will be run on\n * @param {string} property Name of property\n * @param {Object} props Bag of current property changes\n * @param {Object} oldProps Bag of previous values for changed properties\n * @param {?} info Effect metadata\n * @return {*} Returns the return value from the method invocation\n * @private\n */\nfunction runMethodEffect(inst, property, props, oldProps, info) {\n  // Instances can optionally have a _methodHost which allows redirecting where\n  // to find methods. Currently used by `templatize`.\n  let context = inst._methodHost || inst;\n  let fn = context[info.methodName];\n  if (fn) {\n    let args = marshalArgs(inst.__data, info.args, property, props);\n    return fn.apply(context, args);\n  } else if (!info.dynamicFn) {\n    console.warn('method `' + info.methodName + '` not defined');\n  }\n}\n\nconst emptyArray = [];\n\n// Regular expressions used for binding\nconst IDENT  = '(?:' + '[a-zA-Z_$][\\\\w.:$\\\\-*]*' + ')';\nconst NUMBER = '(?:' + '[-+]?[0-9]*\\\\.?[0-9]+(?:[eE][-+]?[0-9]+)?' + ')';\nconst SQUOTE_STRING = '(?:' + '\\'(?:[^\\'\\\\\\\\]|\\\\\\\\.)*\\'' + ')';\nconst DQUOTE_STRING = '(?:' + '\"(?:[^\"\\\\\\\\]|\\\\\\\\.)*\"' + ')';\nconst STRING = '(?:' + SQUOTE_STRING + '|' + DQUOTE_STRING + ')';\nconst ARGUMENT = '(?:(' + IDENT + '|' + NUMBER + '|' +  STRING + ')\\\\s*' + ')';\nconst ARGUMENTS = '(?:' + ARGUMENT + '(?:,\\\\s*' + ARGUMENT + ')*' + ')';\nconst ARGUMENT_LIST = '(?:' + '\\\\(\\\\s*' +\n                              '(?:' + ARGUMENTS + '?' + ')' +\n                            '\\\\)\\\\s*' + ')';\nconst BINDING = '(' + IDENT + '\\\\s*' + ARGUMENT_LIST + '?' + ')'; // Group 3\nconst OPEN_BRACKET = '(\\\\[\\\\[|{{)' + '\\\\s*';\nconst CLOSE_BRACKET = '(?:]]|}})';\nconst NEGATE = '(?:(!)\\\\s*)?'; // Group 2\nconst EXPRESSION = OPEN_BRACKET + NEGATE + BINDING + CLOSE_BRACKET;\nconst bindingRegex = new RegExp(EXPRESSION, \"g\");\n\n/**\n * Create a string from binding parts of all the literal parts\n *\n * @param {!Array<BindingPart>} parts All parts to stringify\n * @return {string} String made from the literal parts\n */\nfunction literalFromParts(parts) {\n  let s = '';\n  for (let i=0; i<parts.length; i++) {\n    let literal = parts[i].literal;\n    s += literal || '';\n  }\n  return s;\n}\n\n/**\n * Parses an expression string for a method signature, and returns a metadata\n * describing the method in terms of `methodName`, `static` (whether all the\n * arguments are literals), and an array of `args`\n *\n * @param {string} expression The expression to parse\n * @return {?MethodSignature} The method metadata object if a method expression was\n *   found, otherwise `undefined`\n * @private\n */\nfunction parseMethod(expression) {\n  // tries to match valid javascript property names\n  let m = expression.match(/([^\\s]+?)\\(([\\s\\S]*)\\)/);\n  if (m) {\n    let methodName = m[1];\n    let sig = { methodName, static: true, args: emptyArray };\n    if (m[2].trim()) {\n      // replace escaped commas with comma entity, split on un-escaped commas\n      let args = m[2].replace(/\\\\,/g, '&comma;').split(',');\n      return parseArgs(args, sig);\n    } else {\n      return sig;\n    }\n  }\n  return null;\n}\n\n/**\n * Parses an array of arguments and sets the `args` property of the supplied\n * signature metadata object. Sets the `static` property to false if any\n * argument is a non-literal.\n *\n * @param {!Array<string>} argList Array of argument names\n * @param {!MethodSignature} sig Method signature metadata object\n * @return {!MethodSignature} The updated signature metadata object\n * @private\n */\nfunction parseArgs(argList, sig) {\n  sig.args = argList.map(function(rawArg) {\n    let arg = parseArg(rawArg);\n    if (!arg.literal) {\n      sig.static = false;\n    }\n    return arg;\n  }, this);\n  return sig;\n}\n\n/**\n * Parses an individual argument, and returns an argument metadata object\n * with the following fields:\n *\n *   {\n *     value: 'prop',        // property/path or literal value\n *     literal: false,       // whether argument is a literal\n *     structured: false,    // whether the property is a path\n *     rootProperty: 'prop', // the root property of the path\n *     wildcard: false       // whether the argument was a wildcard '.*' path\n *   }\n *\n * @param {string} rawArg The string value of the argument\n * @return {!MethodArg} Argument metadata object\n * @private\n */\nfunction parseArg(rawArg) {\n  // clean up whitespace\n  let arg = rawArg.trim()\n    // replace comma entity with comma\n    .replace(/&comma;/g, ',')\n    // repair extra escape sequences; note only commas strictly need\n    // escaping, but we allow any other char to be escaped since its\n    // likely users will do this\n    .replace(/\\\\(.)/g, '\\$1')\n    ;\n  // basic argument descriptor\n  let a = {\n    name: arg,\n    value: '',\n    literal: false\n  };\n  // detect literal value (must be String or Number)\n  let fc = arg[0];\n  if (fc === '-') {\n    fc = arg[1];\n  }\n  if (fc >= '0' && fc <= '9') {\n    fc = '#';\n  }\n  switch(fc) {\n    case \"'\":\n    case '\"':\n      a.value = arg.slice(1, -1);\n      a.literal = true;\n      break;\n    case '#':\n      a.value = Number(arg);\n      a.literal = true;\n      break;\n  }\n  // if not literal, look for structured path\n  if (!a.literal) {\n    a.rootProperty = root$0(arg);\n    // detect structured path (has dots)\n    a.structured = isPath$0(arg);\n    if (a.structured) {\n      a.wildcard = (arg.slice(-2) == '.*');\n      if (a.wildcard) {\n        a.name = arg.slice(0, -2);\n      }\n    }\n  }\n  return a;\n}\n\n/**\n * Gather the argument values for a method specified in the provided array\n * of argument metadata.\n *\n * The `path` and `value` arguments are used to fill in wildcard descriptor\n * when the method is being called as a result of a path notification.\n *\n * @param {Object} data Instance data storage object to read properties from\n * @param {!Array<!MethodArg>} args Array of argument metadata\n * @param {string} path Property/path name that triggered the method effect\n * @param {Object} props Bag of current property changes\n * @return {Array<*>} Array of argument values\n * @private\n */\nfunction marshalArgs(data, args, path, props) {\n  let values = [];\n  for (let i=0, l=args.length; i<l; i++) {\n    let arg = args[i];\n    let name = arg.name;\n    let v;\n    if (arg.literal) {\n      v = arg.value;\n    } else {\n      if (arg.structured) {\n        v = get$0(data, name);\n        // when data is not stored e.g. `splices`\n        if (v === undefined) {\n          v = props[name];\n        }\n      } else {\n        v = data[name];\n      }\n    }\n    if (arg.wildcard) {\n      // Only send the actual path changed info if the change that\n      // caused the observer to run matched the wildcard\n      let baseChanged = (name.indexOf(path + '.') === 0);\n      let matches = (path.indexOf(name) === 0 && !baseChanged);\n      values[i] = {\n        path: matches ? path : name,\n        value: matches ? props[path] : v,\n        base: v\n      };\n    } else {\n      values[i] = v;\n    }\n  }\n  return values;\n}\n\n// data api\n\n/**\n * Sends array splice notifications (`.splices` and `.length`)\n *\n * Note: this implementation only accepts normalized paths\n *\n * @param {!PropertyEffectsType} inst Instance to send notifications to\n * @param {Array} array The array the mutations occurred on\n * @param {string} path The path to the array that was mutated\n * @param {Array} splices Array of splice records\n * @return {void}\n * @private\n */\nfunction notifySplices(inst, array, path, splices) {\n  let splicesPath = path + '.splices';\n  inst.notifyPath(splicesPath, { indexSplices: splices });\n  inst.notifyPath(path + '.length', array.length);\n  // Null here to allow potentially large splice records to be GC'ed.\n  inst.__data[splicesPath] = {indexSplices: null};\n}\n\n/**\n * Creates a splice record and sends an array splice notification for\n * the described mutation\n *\n * Note: this implementation only accepts normalized paths\n *\n * @param {!PropertyEffectsType} inst Instance to send notifications to\n * @param {Array} array The array the mutations occurred on\n * @param {string} path The path to the array that was mutated\n * @param {number} index Index at which the array mutation occurred\n * @param {number} addedCount Number of added items\n * @param {Array} removed Array of removed items\n * @return {void}\n * @private\n */\nfunction notifySplice(inst, array, path, index, addedCount, removed) {\n  notifySplices(inst, array, path, [{\n    index: index,\n    addedCount: addedCount,\n    removed: removed,\n    object: array,\n    type: 'splice'\n  }]);\n}\n\n/**\n * Returns an upper-cased version of the string.\n *\n * @param {string} name String to uppercase\n * @return {string} Uppercased string\n * @private\n */\nfunction upper(name) {\n  return name[0].toUpperCase() + name.substring(1);\n}\n\n/**\n * Element class mixin that provides meta-programming for Polymer's template\n * binding and data observation (collectively, \"property effects\") system.\n *\n * This mixin uses provides the following key static methods for adding\n * property effects to an element class:\n * - `addPropertyEffect`\n * - `createPropertyObserver`\n * - `createMethodObserver`\n * - `createNotifyingProperty`\n * - `createReadOnlyProperty`\n * - `createReflectedProperty`\n * - `createComputedProperty`\n * - `bindTemplate`\n *\n * Each method creates one or more property accessors, along with metadata\n * used by this mixin's implementation of `_propertiesChanged` to perform\n * the property effects.\n *\n * Underscored versions of the above methods also exist on the element\n * prototype for adding property effects on instances at runtime.\n *\n * Note that this mixin overrides several `PropertyAccessors` methods, in\n * many cases to maintain guarantees provided by the Polymer 1.x features;\n * notably it changes property accessors to be synchronous by default\n * whereas the default when using `PropertyAccessors` standalone is to be\n * async by default.\n *\n * @mixinFunction\n * @polymer\n * @appliesMixin TemplateStamp\n * @appliesMixin PropertyAccessors\n * @summary Element class mixin that provides meta-programming for Polymer's\n * template binding and data observation system.\n */\nexport const PropertyEffects = dedupingMixin(superClass => {\n\n  /**\n   * @constructor\n   * @extends {superClass}\n   * @implements {Polymer_PropertyAccessors}\n   * @implements {Polymer_TemplateStamp}\n   * @unrestricted\n   */\n  const propertyEffectsBase = TemplateStamp(PropertyAccessors(superClass));\n\n  /**\n   * @polymer\n   * @mixinClass\n   * @implements {Polymer_PropertyEffects}\n   * @extends {propertyEffectsBase}\n   * @unrestricted\n   */\n  class PropertyEffects extends propertyEffectsBase {\n\n    constructor() {\n      super();\n      /** @type {boolean} */\n      // Used to identify users of this mixin, ala instanceof\n      this.__isPropertyEffectsClient = true;\n      /** @type {number} */\n      // NOTE: used to track re-entrant calls to `_flushProperties`\n      // path changes dirty check against `__dataTemp` only during one \"turn\"\n      // and are cleared when `__dataCounter` returns to 0.\n      this.__dataCounter = 0;\n      /** @type {boolean} */\n      this.__dataClientsReady;\n      /** @type {Array} */\n      this.__dataPendingClients;\n      /** @type {Object} */\n      this.__dataToNotify;\n      /** @type {Object} */\n      this.__dataLinkedPaths;\n      /** @type {boolean} */\n      this.__dataHasPaths;\n      /** @type {Object} */\n      this.__dataCompoundStorage;\n      /** @type {Polymer_PropertyEffects} */\n      this.__dataHost;\n      /** @type {!Object} */\n      this.__dataTemp;\n      /** @type {boolean} */\n      this.__dataClientsInitialized;\n      /** @type {!Object} */\n      this.__data;\n      /** @type {!Object} */\n      this.__dataPending;\n      /** @type {!Object} */\n      this.__dataOld;\n      /** @type {Object} */\n      this.__computeEffects;\n      /** @type {Object} */\n      this.__reflectEffects;\n      /** @type {Object} */\n      this.__notifyEffects;\n      /** @type {Object} */\n      this.__propagateEffects;\n      /** @type {Object} */\n      this.__observeEffects;\n      /** @type {Object} */\n      this.__readOnly;\n      /** @type {!TemplateInfo} */\n      this.__templateInfo;\n    }\n\n    get PROPERTY_EFFECT_TYPES() {\n      return TYPES;\n    }\n\n    /**\n     * @return {void}\n     */\n    _initializeProperties() {\n      super._initializeProperties();\n      hostStack.registerHost(this);\n      this.__dataClientsReady = false;\n      this.__dataPendingClients = null;\n      this.__dataToNotify = null;\n      this.__dataLinkedPaths = null;\n      this.__dataHasPaths = false;\n      // May be set on instance prior to upgrade\n      this.__dataCompoundStorage = this.__dataCompoundStorage || null;\n      this.__dataHost = this.__dataHost || null;\n      this.__dataTemp = {};\n      this.__dataClientsInitialized = false;\n    }\n\n    /**\n     * Overrides `PropertyAccessors` implementation to provide a\n     * more efficient implementation of initializing properties from\n     * the prototype on the instance.\n     *\n     * @override\n     * @param {Object} props Properties to initialize on the prototype\n     * @return {void}\n     */\n    _initializeProtoProperties(props) {\n      this.__data = Object.create(props);\n      this.__dataPending = Object.create(props);\n      this.__dataOld = {};\n    }\n\n    /**\n     * Overrides `PropertyAccessors` implementation to avoid setting\n     * `_setProperty`'s `shouldNotify: true`.\n     *\n     * @override\n     * @param {Object} props Properties to initialize on the instance\n     * @return {void}\n     */\n    _initializeInstanceProperties(props) {\n      let readOnly = this[TYPES.READ_ONLY];\n      for (let prop in props) {\n        if (!readOnly || !readOnly[prop]) {\n          this.__dataPending = this.__dataPending || {};\n          this.__dataOld = this.__dataOld || {};\n          this.__data[prop] = this.__dataPending[prop] = props[prop];\n        }\n      }\n    }\n\n    // Prototype setup ----------------------------------------\n\n    /**\n     * Equivalent to static `addPropertyEffect` API but can be called on\n     * an instance to add effects at runtime.  See that method for\n     * full API docs.\n     *\n     * @param {string} property Property that should trigger the effect\n     * @param {string} type Effect type, from this.PROPERTY_EFFECT_TYPES\n     * @param {Object=} effect Effect metadata object\n     * @return {void}\n     * @protected\n     */\n    _addPropertyEffect(property, type, effect) {\n      this._createPropertyAccessor(property, type == TYPES.READ_ONLY);\n      // effects are accumulated into arrays per property based on type\n      let effects = ensureOwnEffectMap(this, type)[property];\n      if (!effects) {\n        effects = this[type][property] = [];\n      }\n      effects.push(effect);\n    }\n\n    /**\n     * Removes the given property effect.\n     *\n     * @param {string} property Property the effect was associated with\n     * @param {string} type Effect type, from this.PROPERTY_EFFECT_TYPES\n     * @param {Object=} effect Effect metadata object to remove\n     * @return {void}\n     */\n    _removePropertyEffect(property, type, effect) {\n      let effects = ensureOwnEffectMap(this, type)[property];\n      let idx = effects.indexOf(effect);\n      if (idx >= 0) {\n        effects.splice(idx, 1);\n      }\n    }\n\n    /**\n     * Returns whether the current prototype/instance has a property effect\n     * of a certain type.\n     *\n     * @param {string} property Property name\n     * @param {string=} type Effect type, from this.PROPERTY_EFFECT_TYPES\n     * @return {boolean} True if the prototype/instance has an effect of this type\n     * @protected\n     */\n    _hasPropertyEffect(property, type) {\n      let effects = this[type];\n      return Boolean(effects && effects[property]);\n    }\n\n    /**\n     * Returns whether the current prototype/instance has a \"read only\"\n     * accessor for the given property.\n     *\n     * @param {string} property Property name\n     * @return {boolean} True if the prototype/instance has an effect of this type\n     * @protected\n     */\n    _hasReadOnlyEffect(property) {\n      return this._hasPropertyEffect(property, TYPES.READ_ONLY);\n    }\n\n    /**\n     * Returns whether the current prototype/instance has a \"notify\"\n     * property effect for the given property.\n     *\n     * @param {string} property Property name\n     * @return {boolean} True if the prototype/instance has an effect of this type\n     * @protected\n     */\n    _hasNotifyEffect(property) {\n      return this._hasPropertyEffect(property, TYPES.NOTIFY);\n    }\n\n    /**\n     * Returns whether the current prototype/instance has a \"reflect to attribute\"\n     * property effect for the given property.\n     *\n     * @param {string} property Property name\n     * @return {boolean} True if the prototype/instance has an effect of this type\n     * @protected\n     */\n    _hasReflectEffect(property) {\n      return this._hasPropertyEffect(property, TYPES.REFLECT);\n    }\n\n    /**\n     * Returns whether the current prototype/instance has a \"computed\"\n     * property effect for the given property.\n     *\n     * @param {string} property Property name\n     * @return {boolean} True if the prototype/instance has an effect of this type\n     * @protected\n     */\n    _hasComputedEffect(property) {\n      return this._hasPropertyEffect(property, TYPES.COMPUTE);\n    }\n\n    // Runtime ----------------------------------------\n\n    /**\n     * Sets a pending property or path.  If the root property of the path in\n     * question had no accessor, the path is set, otherwise it is enqueued\n     * via `_setPendingProperty`.\n     *\n     * This function isolates relatively expensive functionality necessary\n     * for the public API (`set`, `setProperties`, `notifyPath`, and property\n     * change listeners via {{...}} bindings), such that it is only done\n     * when paths enter the system, and not at every propagation step.  It\n     * also sets a `__dataHasPaths` flag on the instance which is used to\n     * fast-path slower path-matching code in the property effects host paths.\n     *\n     * `path` can be a path string or array of path parts as accepted by the\n     * public API.\n     *\n     * @param {string | !Array<number|string>} path Path to set\n     * @param {*} value Value to set\n     * @param {boolean=} shouldNotify Set to true if this change should\n     *  cause a property notification event dispatch\n     * @param {boolean=} isPathNotification If the path being set is a path\n     *   notification of an already changed value, as opposed to a request\n     *   to set and notify the change.  In the latter `false` case, a dirty\n     *   check is performed and then the value is set to the path before\n     *   enqueuing the pending property change.\n     * @return {boolean} Returns true if the property/path was enqueued in\n     *   the pending changes bag.\n     * @protected\n     */\n    _setPendingPropertyOrPath(path, value, shouldNotify, isPathNotification) {\n      if (isPathNotification ||\n          root$0(Array.isArray(path) ? path[0] : path) !== path) {\n        // Dirty check changes being set to a path against the actual object,\n        // since this is the entry point for paths into the system; from here\n        // the only dirty checks are against the `__dataTemp` cache to prevent\n        // duplicate work in the same turn only. Note, if this was a notification\n        // of a change already set to a path (isPathNotification: true),\n        // we always let the change through and skip the `set` since it was\n        // already dirty checked at the point of entry and the underlying\n        // object has already been updated\n        if (!isPathNotification) {\n          let old = get$0(this, path);\n          path = /** @type {string} */ (set$0(this, path, value));\n          // Use property-accessor's simpler dirty check\n          if (!path || !super._shouldPropertyChange(path, value, old)) {\n            return false;\n          }\n        }\n        this.__dataHasPaths = true;\n        if (this._setPendingProperty(/**@type{string}*/(path), value, shouldNotify)) {\n          computeLinkedPaths(this, path, value);\n          return true;\n        }\n      } else {\n        if (this.__dataHasAccessor && this.__dataHasAccessor[path]) {\n          return this._setPendingProperty(/**@type{string}*/(path), value, shouldNotify);\n        } else {\n          this[path] = value;\n        }\n      }\n      return false;\n    }\n\n    /**\n     * Applies a value to a non-Polymer element/node's property.\n     *\n     * The implementation makes a best-effort at binding interop:\n     * Some native element properties have side-effects when\n     * re-setting the same value (e.g. setting `<input>.value` resets the\n     * cursor position), so we do a dirty-check before setting the value.\n     * However, for better interop with non-Polymer custom elements that\n     * accept objects, we explicitly re-set object changes coming from the\n     * Polymer world (which may include deep object changes without the\n     * top reference changing), erring on the side of providing more\n     * information.\n     *\n     * Users may override this method to provide alternate approaches.\n     *\n     * @param {!Node} node The node to set a property on\n     * @param {string} prop The property to set\n     * @param {*} value The value to set\n     * @return {void}\n     * @protected\n     */\n    _setUnmanagedPropertyToNode(node, prop, value) {\n      // It is a judgment call that resetting primitives is\n      // \"bad\" and resettings objects is also \"good\"; alternatively we could\n      // implement a whitelist of tag & property values that should never\n      // be reset (e.g. <input>.value && <select>.value)\n      if (value !== node[prop] || typeof value == 'object') {\n        node[prop] = value;\n      }\n    }\n\n    /**\n     * Overrides the `PropertiesChanged` implementation to introduce special\n     * dirty check logic depending on the property & value being set:\n     *\n     * 1. Any value set to a path (e.g. 'obj.prop': 42 or 'obj.prop': {...})\n     *    Stored in `__dataTemp`, dirty checked against `__dataTemp`\n     * 2. Object set to simple property (e.g. 'prop': {...})\n     *    Stored in `__dataTemp` and `__data`, dirty checked against\n     *    `__dataTemp` by default implementation of `_shouldPropertyChange`\n     * 3. Primitive value set to simple property (e.g. 'prop': 42)\n     *    Stored in `__data`, dirty checked against `__data`\n     *\n     * The dirty-check is important to prevent cycles due to two-way\n     * notification, but paths and objects are only dirty checked against any\n     * previous value set during this turn via a \"temporary cache\" that is\n     * cleared when the last `_propertiesChanged` exits. This is so:\n     * a. any cached array paths (e.g. 'array.3.prop') may be invalidated\n     *    due to array mutations like shift/unshift/splice; this is fine\n     *    since path changes are dirty-checked at user entry points like `set`\n     * b. dirty-checking for objects only lasts one turn to allow the user\n     *    to mutate the object in-place and re-set it with the same identity\n     *    and have all sub-properties re-propagated in a subsequent turn.\n     *\n     * The temp cache is not necessarily sufficient to prevent invalid array\n     * paths, since a splice can happen during the same turn (with pathological\n     * user code); we could introduce a \"fixup\" for temporarily cached array\n     * paths if needed: https://github.com/Polymer/polymer/issues/4227\n     *\n     * @override\n     * @param {string} property Name of the property\n     * @param {*} value Value to set\n     * @param {boolean=} shouldNotify True if property should fire notification\n     *   event (applies only for `notify: true` properties)\n     * @return {boolean} Returns true if the property changed\n     */\n    _setPendingProperty(property, value, shouldNotify) {\n      let isPath = this.__dataHasPaths && isPath$0(property);\n      let prevProps = isPath ? this.__dataTemp : this.__data;\n      if (this._shouldPropertyChange(property, value, prevProps[property])) {\n        if (!this.__dataPending) {\n          this.__dataPending = {};\n          this.__dataOld = {};\n        }\n        // Ensure old is captured from the last turn\n        if (!(property in this.__dataOld)) {\n          this.__dataOld[property] = this.__data[property];\n        }\n        // Paths are stored in temporary cache (cleared at end of turn),\n        // which is used for dirty-checking, all others stored in __data\n        if (isPath) {\n          this.__dataTemp[property] = value;\n        } else {\n          this.__data[property] = value;\n        }\n        // All changes go into pending property bag, passed to _propertiesChanged\n        this.__dataPending[property] = value;\n        // Track properties that should notify separately\n        if (isPath || (this[TYPES.NOTIFY] && this[TYPES.NOTIFY][property])) {\n          this.__dataToNotify = this.__dataToNotify || {};\n          this.__dataToNotify[property] = shouldNotify;\n        }\n        return true;\n      }\n      return false;\n    }\n\n    /**\n     * Overrides base implementation to ensure all accessors set `shouldNotify`\n     * to true, for per-property notification tracking.\n     *\n     * @override\n     * @param {string} property Name of the property\n     * @param {*} value Value to set\n     * @return {void}\n     */\n    _setProperty(property, value) {\n      if (this._setPendingProperty(property, value, true)) {\n        this._invalidateProperties();\n      }\n    }\n\n    /**\n     * Overrides `PropertyAccessor`'s default async queuing of\n     * `_propertiesChanged`: if `__dataReady` is false (has not yet been\n     * manually flushed), the function no-ops; otherwise flushes\n     * `_propertiesChanged` synchronously.\n     *\n     * @override\n     * @return {void}\n     */\n    _invalidateProperties() {\n      if (this.__dataReady) {\n        this._flushProperties();\n      }\n    }\n\n    /**\n     * Enqueues the given client on a list of pending clients, whose\n     * pending property changes can later be flushed via a call to\n     * `_flushClients`.\n     *\n     * @param {Object} client PropertyEffects client to enqueue\n     * @return {void}\n     * @protected\n     */\n    _enqueueClient(client) {\n      this.__dataPendingClients = this.__dataPendingClients || [];\n      if (client !== this) {\n        this.__dataPendingClients.push(client);\n      }\n    }\n\n    /**\n     * Overrides superclass implementation.\n     *\n     * @return {void}\n     * @protected\n     */\n    _flushProperties() {\n      this.__dataCounter++;\n      super._flushProperties();\n      this.__dataCounter--;\n    }\n\n    /**\n     * Flushes any clients previously enqueued via `_enqueueClient`, causing\n     * their `_flushProperties` method to run.\n     *\n     * @return {void}\n     * @protected\n     */\n    _flushClients() {\n      if (!this.__dataClientsReady) {\n        this.__dataClientsReady = true;\n        this._readyClients();\n        // Override point where accessors are turned on; importantly,\n        // this is after clients have fully readied, providing a guarantee\n        // that any property effects occur only after all clients are ready.\n        this.__dataReady = true;\n      } else {\n        this.__enableOrFlushClients();\n      }\n    }\n\n    // NOTE: We ensure clients either enable or flush as appropriate. This\n    // handles two corner cases:\n    // (1) clients flush properly when connected/enabled before the host\n    // enables; e.g.\n    //   (a) Templatize stamps with no properties and does not flush and\n    //   (b) the instance is inserted into dom and\n    //   (c) then the instance flushes.\n    // (2) clients enable properly when not connected/enabled when the host\n    // flushes; e.g.\n    //   (a) a template is runtime stamped and not yet connected/enabled\n    //   (b) a host sets a property, causing stamped dom to flush\n    //   (c) the stamped dom enables.\n    __enableOrFlushClients() {\n      let clients = this.__dataPendingClients;\n      if (clients) {\n        this.__dataPendingClients = null;\n        for (let i=0; i < clients.length; i++) {\n          let client = clients[i];\n          if (!client.__dataEnabled) {\n            client._enableProperties();\n          } else if (client.__dataPending) {\n            client._flushProperties();\n          }\n        }\n      }\n    }\n\n    /**\n     * Perform any initial setup on client dom. Called before the first\n     * `_flushProperties` call on client dom and before any element\n     * observers are called.\n     *\n     * @return {void}\n     * @protected\n     */\n    _readyClients() {\n      this.__enableOrFlushClients();\n    }\n\n    /**\n     * Sets a bag of property changes to this instance, and\n     * synchronously processes all effects of the properties as a batch.\n     *\n     * Property names must be simple properties, not paths.  Batched\n     * path propagation is not supported.\n     *\n     * @param {Object} props Bag of one or more key-value pairs whose key is\n     *   a property and value is the new value to set for that property.\n     * @param {boolean=} setReadOnly When true, any private values set in\n     *   `props` will be set. By default, `setProperties` will not set\n     *   `readOnly: true` root properties.\n     * @return {void}\n     * @public\n     */\n    setProperties(props, setReadOnly) {\n      for (let path in props) {\n        if (setReadOnly || !this[TYPES.READ_ONLY] || !this[TYPES.READ_ONLY][path]) {\n          //TODO(kschaaf): explicitly disallow paths in setProperty?\n          // wildcard observers currently only pass the first changed path\n          // in the `info` object, and you could do some odd things batching\n          // paths, e.g. {'foo.bar': {...}, 'foo': null}\n          this._setPendingPropertyOrPath(path, props[path], true);\n        }\n      }\n      this._invalidateProperties();\n    }\n\n    /**\n     * Overrides `PropertyAccessors` so that property accessor\n     * side effects are not enabled until after client dom is fully ready.\n     * Also calls `_flushClients` callback to ensure client dom is enabled\n     * that was not enabled as a result of flushing properties.\n     *\n     * @override\n     * @return {void}\n     */\n    ready() {\n      // It is important that `super.ready()` is not called here as it\n      // immediately turns on accessors. Instead, we wait until `readyClients`\n      // to enable accessors to provide a guarantee that clients are ready\n      // before processing any accessors side effects.\n      this._flushProperties();\n      // If no data was pending, `_flushProperties` will not `flushClients`\n      // so ensure this is done.\n      if (!this.__dataClientsReady) {\n        this._flushClients();\n      }\n      // Before ready, client notifications do not trigger _flushProperties.\n      // Therefore a flush is necessary here if data has been set.\n      if (this.__dataPending) {\n        this._flushProperties();\n      }\n    }\n\n    /**\n     * Implements `PropertyAccessors`'s properties changed callback.\n     *\n     * Runs each class of effects for the batch of changed properties in\n     * a specific order (compute, propagate, reflect, observe, notify).\n     *\n     * @param {!Object} currentProps Bag of all current accessor values\n     * @param {!Object} changedProps Bag of properties changed since the last\n     *   call to `_propertiesChanged`\n     * @param {!Object} oldProps Bag of previous values for each property\n     *   in `changedProps`\n     * @return {void}\n     */\n    _propertiesChanged(currentProps, changedProps, oldProps) {\n      // ----------------------------\n      // let c = Object.getOwnPropertyNames(changedProps || {});\n      // window.debug && console.group(this.localName + '#' + this.id + ': ' + c);\n      // if (window.debug) { debugger; }\n      // ----------------------------\n      let hasPaths = this.__dataHasPaths;\n      this.__dataHasPaths = false;\n      // Compute properties\n      runComputedEffects(this, changedProps, oldProps, hasPaths);\n      // Clear notify properties prior to possible reentry (propagate, observe),\n      // but after computing effects have a chance to add to them\n      let notifyProps = this.__dataToNotify;\n      this.__dataToNotify = null;\n      // Propagate properties to clients\n      this._propagatePropertyChanges(changedProps, oldProps, hasPaths);\n      // Flush clients\n      this._flushClients();\n      // Reflect properties\n      runEffects(this, this[TYPES.REFLECT], changedProps, oldProps, hasPaths);\n      // Observe properties\n      runEffects(this, this[TYPES.OBSERVE], changedProps, oldProps, hasPaths);\n      // Notify properties to host\n      if (notifyProps) {\n        runNotifyEffects(this, notifyProps, changedProps, oldProps, hasPaths);\n      }\n      // Clear temporary cache at end of turn\n      if (this.__dataCounter == 1) {\n        this.__dataTemp = {};\n      }\n      // ----------------------------\n      // window.debug && console.groupEnd(this.localName + '#' + this.id + ': ' + c);\n      // ----------------------------\n    }\n\n    /**\n     * Called to propagate any property changes to stamped template nodes\n     * managed by this element.\n     *\n     * @param {Object} changedProps Bag of changed properties\n     * @param {Object} oldProps Bag of previous values for changed properties\n     * @param {boolean} hasPaths True with `props` contains one or more paths\n     * @return {void}\n     * @protected\n     */\n    _propagatePropertyChanges(changedProps, oldProps, hasPaths) {\n      if (this[TYPES.PROPAGATE]) {\n        runEffects(this, this[TYPES.PROPAGATE], changedProps, oldProps, hasPaths);\n      }\n      let templateInfo = this.__templateInfo;\n      while (templateInfo) {\n        runEffects(this, templateInfo.propertyEffects, changedProps, oldProps,\n          hasPaths, templateInfo.nodeList);\n        templateInfo = templateInfo.nextTemplateInfo;\n      }\n    }\n\n    /**\n     * Aliases one data path as another, such that path notifications from one\n     * are routed to the other.\n     *\n     * @param {string | !Array<string|number>} to Target path to link.\n     * @param {string | !Array<string|number>} from Source path to link.\n     * @return {void}\n     * @public\n     */\n    linkPaths(to, from) {\n      to = normalize(to);\n      from = normalize(from);\n      this.__dataLinkedPaths = this.__dataLinkedPaths || {};\n      this.__dataLinkedPaths[to] = from;\n    }\n\n    /**\n     * Removes a data path alias previously established with `_linkPaths`.\n     *\n     * Note, the path to unlink should be the target (`to`) used when\n     * linking the paths.\n     *\n     * @param {string | !Array<string|number>} path Target path to unlink.\n     * @return {void}\n     * @public\n     */\n    unlinkPaths(path) {\n      path = normalize(path);\n      if (this.__dataLinkedPaths) {\n        delete this.__dataLinkedPaths[path];\n      }\n    }\n\n    /**\n     * Notify that an array has changed.\n     *\n     * Example:\n     *\n     *     this.items = [ {name: 'Jim'}, {name: 'Todd'}, {name: 'Bill'} ];\n     *     ...\n     *     this.items.splice(1, 1, {name: 'Sam'});\n     *     this.items.push({name: 'Bob'});\n     *     this.notifySplices('items', [\n     *       { index: 1, removed: [{name: 'Todd'}], addedCount: 1, object: this.items, type: 'splice' },\n     *       { index: 3, removed: [], addedCount: 1, object: this.items, type: 'splice'}\n     *     ]);\n     *\n     * @param {string} path Path that should be notified.\n     * @param {Array} splices Array of splice records indicating ordered\n     *   changes that occurred to the array. Each record should have the\n     *   following fields:\n     *    * index: index at which the change occurred\n     *    * removed: array of items that were removed from this index\n     *    * addedCount: number of new items added at this index\n     *    * object: a reference to the array in question\n     *    * type: the string literal 'splice'\n     *\n     *   Note that splice records _must_ be normalized such that they are\n     *   reported in index order (raw results from `Object.observe` are not\n     *   ordered and must be normalized/merged before notifying).\n     * @return {void}\n     * @public\n    */\n    notifySplices(path, splices) {\n      let info = {path: ''};\n      let array = /** @type {Array} */(get$0(this, path, info));\n      notifySplices(this, array, info.path, splices);\n    }\n\n    /**\n     * Convenience method for reading a value from a path.\n     *\n     * Note, if any part in the path is undefined, this method returns\n     * `undefined` (this method does not throw when dereferencing undefined\n     * paths).\n     *\n     * @param {(string|!Array<(string|number)>)} path Path to the value\n     *   to read.  The path may be specified as a string (e.g. `foo.bar.baz`)\n     *   or an array of path parts (e.g. `['foo.bar', 'baz']`).  Note that\n     *   bracketed expressions are not supported; string-based path parts\n     *   *must* be separated by dots.  Note that when dereferencing array\n     *   indices, the index may be used as a dotted part directly\n     *   (e.g. `users.12.name` or `['users', 12, 'name']`).\n     * @param {Object=} root Root object from which the path is evaluated.\n     * @return {*} Value at the path, or `undefined` if any part of the path\n     *   is undefined.\n     * @public\n     */\n    get(path, root) {\n      return get$0(root || this, path);\n    }\n\n    /**\n     * Convenience method for setting a value to a path and notifying any\n     * elements bound to the same path.\n     *\n     * Note, if any part in the path except for the last is undefined,\n     * this method does nothing (this method does not throw when\n     * dereferencing undefined paths).\n     *\n     * @param {(string|!Array<(string|number)>)} path Path to the value\n     *   to write.  The path may be specified as a string (e.g. `'foo.bar.baz'`)\n     *   or an array of path parts (e.g. `['foo.bar', 'baz']`).  Note that\n     *   bracketed expressions are not supported; string-based path parts\n     *   *must* be separated by dots.  Note that when dereferencing array\n     *   indices, the index may be used as a dotted part directly\n     *   (e.g. `'users.12.name'` or `['users', 12, 'name']`).\n     * @param {*} value Value to set at the specified path.\n     * @param {Object=} root Root object from which the path is evaluated.\n     *   When specified, no notification will occur.\n     * @return {void}\n     * @public\n    */\n    set(path, value, root) {\n      if (root) {\n        set$0(root, path, value);\n      } else {\n        if (!this[TYPES.READ_ONLY] || !this[TYPES.READ_ONLY][/** @type {string} */(path)]) {\n          if (this._setPendingPropertyOrPath(path, value, true)) {\n            this._invalidateProperties();\n          }\n        }\n      }\n    }\n\n    /**\n     * Adds items onto the end of the array at the path specified.\n     *\n     * The arguments after `path` and return value match that of\n     * `Array.prototype.push`.\n     *\n     * This method notifies other paths to the same array that a\n     * splice occurred to the array.\n     *\n     * @param {string | !Array<string|number>} path Path to array.\n     * @param {...*} items Items to push onto array\n     * @return {number} New length of the array.\n     * @public\n     */\n    push(path, ...items) {\n      let info = {path: ''};\n      let array = /** @type {Array}*/(get$0(this, path, info));\n      let len = array.length;\n      let ret = array.push(...items);\n      if (items.length) {\n        notifySplice(this, array, info.path, len, items.length, []);\n      }\n      return ret;\n    }\n\n    /**\n     * Removes an item from the end of array at the path specified.\n     *\n     * The arguments after `path` and return value match that of\n     * `Array.prototype.pop`.\n     *\n     * This method notifies other paths to the same array that a\n     * splice occurred to the array.\n     *\n     * @param {string | !Array<string|number>} path Path to array.\n     * @return {*} Item that was removed.\n     * @public\n     */\n    pop(path) {\n      let info = {path: ''};\n      let array = /** @type {Array} */(get$0(this, path, info));\n      let hadLength = Boolean(array.length);\n      let ret = array.pop();\n      if (hadLength) {\n        notifySplice(this, array, info.path, array.length, 0, [ret]);\n      }\n      return ret;\n    }\n\n    /**\n     * Starting from the start index specified, removes 0 or more items\n     * from the array and inserts 0 or more new items in their place.\n     *\n     * The arguments after `path` and return value match that of\n     * `Array.prototype.splice`.\n     *\n     * This method notifies other paths to the same array that a\n     * splice occurred to the array.\n     *\n     * @param {string | !Array<string|number>} path Path to array.\n     * @param {number} start Index from which to start removing/inserting.\n     * @param {number} deleteCount Number of items to remove.\n     * @param {...*} items Items to insert into array.\n     * @return {Array} Array of removed items.\n     * @public\n     */\n    splice(path, start, deleteCount, ...items) {\n      let info = {path : ''};\n      let array = /** @type {Array} */(get$0(this, path, info));\n      // Normalize fancy native splice handling of crazy start values\n      if (start < 0) {\n        start = array.length - Math.floor(-start);\n      } else if (start) {\n        start = Math.floor(start);\n      }\n      // array.splice does different things based on the number of arguments\n      // you pass in. Therefore, array.splice(0) and array.splice(0, undefined)\n      // do different things. In the former, the whole array is cleared. In the\n      // latter, no items are removed.\n      // This means that we need to detect whether 1. one of the arguments\n      // is actually passed in and then 2. determine how many arguments\n      // we should pass on to the native array.splice\n      //\n      let ret;\n      // Omit any additional arguments if they were not passed in\n      if (arguments.length === 2) {\n        ret = array.splice(start);\n      // Either start was undefined and the others were defined, but in this\n      // case we can safely pass on all arguments\n      //\n      // Note: this includes the case where none of the arguments were passed in,\n      // e.g. this.splice('array'). However, if both start and deleteCount\n      // are undefined, array.splice will not modify the array (as expected)\n      } else {\n        ret = array.splice(start, deleteCount, ...items);\n      }\n      // At the end, check whether any items were passed in (e.g. insertions)\n      // or if the return array contains items (e.g. deletions).\n      // Only notify if items were added or deleted.\n      if (items.length || ret.length) {\n        notifySplice(this, array, info.path, start, items.length, ret);\n      }\n      return ret;\n    }\n\n    /**\n     * Removes an item from the beginning of array at the path specified.\n     *\n     * The arguments after `path` and return value match that of\n     * `Array.prototype.pop`.\n     *\n     * This method notifies other paths to the same array that a\n     * splice occurred to the array.\n     *\n     * @param {string | !Array<string|number>} path Path to array.\n     * @return {*} Item that was removed.\n     * @public\n     */\n    shift(path) {\n      let info = {path: ''};\n      let array = /** @type {Array} */(get$0(this, path, info));\n      let hadLength = Boolean(array.length);\n      let ret = array.shift();\n      if (hadLength) {\n        notifySplice(this, array, info.path, 0, 0, [ret]);\n      }\n      return ret;\n    }\n\n    /**\n     * Adds items onto the beginning of the array at the path specified.\n     *\n     * The arguments after `path` and return value match that of\n     * `Array.prototype.push`.\n     *\n     * This method notifies other paths to the same array that a\n     * splice occurred to the array.\n     *\n     * @param {string | !Array<string|number>} path Path to array.\n     * @param {...*} items Items to insert info array\n     * @return {number} New length of the array.\n     * @public\n     */\n    unshift(path, ...items) {\n      let info = {path: ''};\n      let array = /** @type {Array} */(get$0(this, path, info));\n      let ret = array.unshift(...items);\n      if (items.length) {\n        notifySplice(this, array, info.path, 0, items.length, []);\n      }\n      return ret;\n    }\n\n    /**\n     * Notify that a path has changed.\n     *\n     * Example:\n     *\n     *     this.item.user.name = 'Bob';\n     *     this.notifyPath('item.user.name');\n     *\n     * @param {string} path Path that should be notified.\n     * @param {*=} value Value at the path (optional).\n     * @return {void}\n     * @public\n    */\n    notifyPath(path, value) {\n      /** @type {string} */\n      let propPath;\n      if (arguments.length == 1) {\n        // Get value if not supplied\n        let info = {path: ''};\n        value = get$0(this, path, info);\n        propPath = info.path;\n      } else if (Array.isArray(path)) {\n        // Normalize path if needed\n        propPath = normalize(path);\n      } else {\n        propPath = /** @type{string} */(path);\n      }\n      if (this._setPendingPropertyOrPath(propPath, value, true, true)) {\n        this._invalidateProperties();\n      }\n    }\n\n    /**\n     * Equivalent to static `createReadOnlyProperty` API but can be called on\n     * an instance to add effects at runtime.  See that method for\n     * full API docs.\n     *\n     * @param {string} property Property name\n     * @param {boolean=} protectedSetter Creates a custom protected setter\n     *   when `true`.\n     * @return {void}\n     * @protected\n     */\n    _createReadOnlyProperty(property, protectedSetter) {\n      this._addPropertyEffect(property, TYPES.READ_ONLY);\n      if (protectedSetter) {\n        this['_set' + upper(property)] = /** @this {PropertyEffects} */function(value) {\n          this._setProperty(property, value);\n        };\n      }\n    }\n\n    /**\n     * Equivalent to static `createPropertyObserver` API but can be called on\n     * an instance to add effects at runtime.  See that method for\n     * full API docs.\n     *\n     * @param {string} property Property name\n     * @param {string|function(*,*)} method Function or name of observer method to call\n     * @param {boolean=} dynamicFn Whether the method name should be included as\n     *   a dependency to the effect.\n     * @return {void}\n     * @protected\n     */\n    _createPropertyObserver(property, method, dynamicFn) {\n      let info = { property, method, dynamicFn: Boolean(dynamicFn) };\n      this._addPropertyEffect(property, TYPES.OBSERVE, {\n        fn: runObserverEffect, info, trigger: {name: property}\n      });\n      if (dynamicFn) {\n        this._addPropertyEffect(/** @type {string} */(method), TYPES.OBSERVE, {\n          fn: runObserverEffect, info, trigger: {name: method}\n        });\n      }\n    }\n\n    /**\n     * Equivalent to static `createMethodObserver` API but can be called on\n     * an instance to add effects at runtime.  See that method for\n     * full API docs.\n     *\n     * @param {string} expression Method expression\n     * @param {boolean|Object=} dynamicFn Boolean or object map indicating\n     *   whether method names should be included as a dependency to the effect.\n     * @return {void}\n     * @protected\n     */\n    _createMethodObserver(expression, dynamicFn) {\n      let sig = parseMethod(expression);\n      if (!sig) {\n        throw new Error(\"Malformed observer expression '\" + expression + \"'\");\n      }\n      createMethodEffect(this, sig, TYPES.OBSERVE, runMethodEffect, null, dynamicFn);\n    }\n\n    /**\n     * Equivalent to static `createNotifyingProperty` API but can be called on\n     * an instance to add effects at runtime.  See that method for\n     * full API docs.\n     *\n     * @param {string} property Property name\n     * @return {void}\n     * @protected\n     */\n    _createNotifyingProperty(property) {\n      this._addPropertyEffect(property, TYPES.NOTIFY, {\n        fn: runNotifyEffect,\n        info: {\n          eventName: CaseMap.camelToDashCase(property) + '-changed',\n          property: property\n        }\n      });\n    }\n\n    /**\n     * Equivalent to static `createReflectedProperty` API but can be called on\n     * an instance to add effects at runtime.  See that method for\n     * full API docs.\n     *\n     * @param {string} property Property name\n     * @return {void}\n     * @protected\n     */\n    _createReflectedProperty(property) {\n      let attr = this.constructor.attributeNameForProperty(property);\n      if (attr[0] === '-') {\n        console.warn('Property ' + property + ' cannot be reflected to attribute ' +\n          attr + ' because \"-\" is not a valid starting attribute name. Use a lowercase first letter for the property instead.');\n      } else {\n        this._addPropertyEffect(property, TYPES.REFLECT, {\n          fn: runReflectEffect,\n          info: {\n            attrName: attr\n          }\n        });\n      }\n    }\n\n    /**\n     * Equivalent to static `createComputedProperty` API but can be called on\n     * an instance to add effects at runtime.  See that method for\n     * full API docs.\n     *\n     * @param {string} property Name of computed property to set\n     * @param {string} expression Method expression\n     * @param {boolean|Object=} dynamicFn Boolean or object map indicating\n     *   whether method names should be included as a dependency to the effect.\n     * @return {void}\n     * @protected\n     */\n    _createComputedProperty(property, expression, dynamicFn) {\n      let sig = parseMethod(expression);\n      if (!sig) {\n        throw new Error(\"Malformed computed expression '\" + expression + \"'\");\n      }\n      createMethodEffect(this, sig, TYPES.COMPUTE, runComputedEffect, property, dynamicFn);\n    }\n\n    // -- static class methods ------------\n\n    /**\n     * Ensures an accessor exists for the specified property, and adds\n     * to a list of \"property effects\" that will run when the accessor for\n     * the specified property is set.  Effects are grouped by \"type\", which\n     * roughly corresponds to a phase in effect processing.  The effect\n     * metadata should be in the following form:\n     *\n     *     {\n     *       fn: effectFunction, // Reference to function to call to perform effect\n     *       info: { ... }       // Effect metadata passed to function\n     *       trigger: {          // Optional triggering metadata; if not provided\n     *         name: string      // the property is treated as a wildcard\n     *         structured: boolean\n     *         wildcard: boolean\n     *       }\n     *     }\n     *\n     * Effects are called from `_propertiesChanged` in the following order by\n     * type:\n     *\n     * 1. COMPUTE\n     * 2. PROPAGATE\n     * 3. REFLECT\n     * 4. OBSERVE\n     * 5. NOTIFY\n     *\n     * Effect functions are called with the following signature:\n     *\n     *     effectFunction(inst, path, props, oldProps, info, hasPaths)\n     *\n     * @param {string} property Property that should trigger the effect\n     * @param {string} type Effect type, from this.PROPERTY_EFFECT_TYPES\n     * @param {Object=} effect Effect metadata object\n     * @return {void}\n     * @protected\n     */\n    static addPropertyEffect(property, type, effect) {\n      this.prototype._addPropertyEffect(property, type, effect);\n    }\n\n    /**\n     * Creates a single-property observer for the given property.\n     *\n     * @param {string} property Property name\n     * @param {string|function(*,*)} method Function or name of observer method to call\n     * @param {boolean=} dynamicFn Whether the method name should be included as\n     *   a dependency to the effect.\n     * @return {void}\n     * @protected\n     */\n    static createPropertyObserver(property, method, dynamicFn) {\n      this.prototype._createPropertyObserver(property, method, dynamicFn);\n    }\n\n    /**\n     * Creates a multi-property \"method observer\" based on the provided\n     * expression, which should be a string in the form of a normal JavaScript\n     * function signature: `'methodName(arg1, [..., argn])'`.  Each argument\n     * should correspond to a property or path in the context of this\n     * prototype (or instance), or may be a literal string or number.\n     *\n     * @param {string} expression Method expression\n     * @param {boolean|Object=} dynamicFn Boolean or object map indicating\n     * @return {void}\n     *   whether method names should be included as a dependency to the effect.\n     * @protected\n     */\n    static createMethodObserver(expression, dynamicFn) {\n      this.prototype._createMethodObserver(expression, dynamicFn);\n    }\n\n    /**\n     * Causes the setter for the given property to dispatch `<property>-changed`\n     * events to notify of changes to the property.\n     *\n     * @param {string} property Property name\n     * @return {void}\n     * @protected\n     */\n    static createNotifyingProperty(property) {\n      this.prototype._createNotifyingProperty(property);\n    }\n\n    /**\n     * Creates a read-only accessor for the given property.\n     *\n     * To set the property, use the protected `_setProperty` API.\n     * To create a custom protected setter (e.g. `_setMyProp()` for\n     * property `myProp`), pass `true` for `protectedSetter`.\n     *\n     * Note, if the property will have other property effects, this method\n     * should be called first, before adding other effects.\n     *\n     * @param {string} property Property name\n     * @param {boolean=} protectedSetter Creates a custom protected setter\n     *   when `true`.\n     * @return {void}\n     * @protected\n     */\n    static createReadOnlyProperty(property, protectedSetter) {\n      this.prototype._createReadOnlyProperty(property, protectedSetter);\n    }\n\n    /**\n     * Causes the setter for the given property to reflect the property value\n     * to a (dash-cased) attribute of the same name.\n     *\n     * @param {string} property Property name\n     * @return {void}\n     * @protected\n     */\n    static createReflectedProperty(property) {\n      this.prototype._createReflectedProperty(property);\n    }\n\n    /**\n     * Creates a computed property whose value is set to the result of the\n     * method described by the given `expression` each time one or more\n     * arguments to the method changes.  The expression should be a string\n     * in the form of a normal JavaScript function signature:\n     * `'methodName(arg1, [..., argn])'`\n     *\n     * @param {string} property Name of computed property to set\n     * @param {string} expression Method expression\n     * @param {boolean|Object=} dynamicFn Boolean or object map indicating whether\n     *   method names should be included as a dependency to the effect.\n     * @return {void}\n     * @protected\n     */\n    static createComputedProperty(property, expression, dynamicFn) {\n      this.prototype._createComputedProperty(property, expression, dynamicFn);\n    }\n\n    /**\n     * Parses the provided template to ensure binding effects are created\n     * for them, and then ensures property accessors are created for any\n     * dependent properties in the template.  Binding effects for bound\n     * templates are stored in a linked list on the instance so that\n     * templates can be efficiently stamped and unstamped.\n     *\n     * @param {!HTMLTemplateElement} template Template containing binding\n     *   bindings\n     * @return {!TemplateInfo} Template metadata object\n     * @protected\n     */\n    static bindTemplate(template) {\n      return this.prototype._bindTemplate(template);\n    }\n\n    // -- binding ----------------------------------------------\n\n    /**\n     * Equivalent to static `bindTemplate` API but can be called on\n     * an instance to add effects at runtime.  See that method for\n     * full API docs.\n     *\n     * This method may be called on the prototype (for prototypical template\n     * binding, to avoid creating accessors every instance) once per prototype,\n     * and will be called with `runtimeBinding: true` by `_stampTemplate` to\n     * create and link an instance of the template metadata associated with a\n     * particular stamping.\n     *\n     * @param {!HTMLTemplateElement} template Template containing binding\n     *   bindings\n     * @param {boolean=} instanceBinding When false (default), performs\n     *   \"prototypical\" binding of the template and overwrites any previously\n     *   bound template for the class. When true (as passed from\n     *   `_stampTemplate`), the template info is instanced and linked into\n     *   the list of bound templates.\n     * @return {!TemplateInfo} Template metadata object; for `runtimeBinding`,\n     *   this is an instance of the prototypical template info\n     * @protected\n     */\n    _bindTemplate(template, instanceBinding) {\n      let templateInfo = this.constructor._parseTemplate(template);\n      let wasPreBound = this.__templateInfo == templateInfo;\n      // Optimization: since this is called twice for proto-bound templates,\n      // don't attempt to recreate accessors if this template was pre-bound\n      if (!wasPreBound) {\n        for (let prop in templateInfo.propertyEffects) {\n          this._createPropertyAccessor(prop);\n        }\n      }\n      if (instanceBinding) {\n        // For instance-time binding, create instance of template metadata\n        // and link into list of templates if necessary\n        templateInfo = /** @type {!TemplateInfo} */(Object.create(templateInfo));\n        templateInfo.wasPreBound = wasPreBound;\n        if (!wasPreBound && this.__templateInfo) {\n          let last = this.__templateInfoLast || this.__templateInfo;\n          this.__templateInfoLast = last.nextTemplateInfo = templateInfo;\n          templateInfo.previousTemplateInfo = last;\n          return templateInfo;\n        }\n      }\n      return this.__templateInfo = templateInfo;\n    }\n\n    /**\n     * Adds a property effect to the given template metadata, which is run\n     * at the \"propagate\" stage of `_propertiesChanged` when the template\n     * has been bound to the element via `_bindTemplate`.\n     *\n     * The `effect` object should match the format in `_addPropertyEffect`.\n     *\n     * @param {Object} templateInfo Template metadata to add effect to\n     * @param {string} prop Property that should trigger the effect\n     * @param {Object=} effect Effect metadata object\n     * @return {void}\n     * @protected\n     */\n    static _addTemplatePropertyEffect(templateInfo, prop, effect) {\n      let hostProps = templateInfo.hostProps = templateInfo.hostProps || {};\n      hostProps[prop] = true;\n      let effects = templateInfo.propertyEffects = templateInfo.propertyEffects || {};\n      let propEffects = effects[prop] = effects[prop] || [];\n      propEffects.push(effect);\n    }\n\n    /**\n     * Stamps the provided template and performs instance-time setup for\n     * Polymer template features, including data bindings, declarative event\n     * listeners, and the `this.$` map of `id`'s to nodes.  A document fragment\n     * is returned containing the stamped DOM, ready for insertion into the\n     * DOM.\n     *\n     * This method may be called more than once; however note that due to\n     * `shadycss` polyfill limitations, only styles from templates prepared\n     * using `ShadyCSS.prepareTemplate` will be correctly polyfilled (scoped\n     * to the shadow root and support CSS custom properties), and note that\n     * `ShadyCSS.prepareTemplate` may only be called once per element. As such,\n     * any styles required by in runtime-stamped templates must be included\n     * in the main element template.\n     *\n     * @param {!HTMLTemplateElement} template Template to stamp\n     * @return {!StampedTemplate} Cloned template content\n     * @override\n     * @protected\n     */\n    _stampTemplate(template) {\n      // Ensures that created dom is `_enqueueClient`'d to this element so\n      // that it can be flushed on next call to `_flushProperties`\n      hostStack.beginHosting(this);\n      let dom = super._stampTemplate(template);\n      hostStack.endHosting(this);\n      let templateInfo = /** @type {!TemplateInfo} */(this._bindTemplate(template, true));\n      // Add template-instance-specific data to instanced templateInfo\n      templateInfo.nodeList = dom.nodeList;\n      // Capture child nodes to allow unstamping of non-prototypical templates\n      if (!templateInfo.wasPreBound) {\n        let nodes = templateInfo.childNodes = [];\n        for (let n=dom.firstChild; n; n=n.nextSibling) {\n          nodes.push(n);\n        }\n      }\n      dom.templateInfo = templateInfo;\n      // Setup compound storage, 2-way listeners, and dataHost for bindings\n      setupBindings(this, templateInfo);\n      // Flush properties into template nodes if already booted\n      if (this.__dataReady) {\n        runEffects(this, templateInfo.propertyEffects, this.__data, null,\n          false, templateInfo.nodeList);\n      }\n      return dom;\n    }\n\n    /**\n     * Removes and unbinds the nodes previously contained in the provided\n     * DocumentFragment returned from `_stampTemplate`.\n     *\n     * @param {!StampedTemplate} dom DocumentFragment previously returned\n     *   from `_stampTemplate` associated with the nodes to be removed\n     * @return {void}\n     * @protected\n     */\n    _removeBoundDom(dom) {\n      // Unlink template info\n      let templateInfo = dom.templateInfo;\n      if (templateInfo.previousTemplateInfo) {\n        templateInfo.previousTemplateInfo.nextTemplateInfo =\n          templateInfo.nextTemplateInfo;\n      }\n      if (templateInfo.nextTemplateInfo) {\n        templateInfo.nextTemplateInfo.previousTemplateInfo =\n          templateInfo.previousTemplateInfo;\n      }\n      if (this.__templateInfoLast == templateInfo) {\n        this.__templateInfoLast = templateInfo.previousTemplateInfo;\n      }\n      templateInfo.previousTemplateInfo = templateInfo.nextTemplateInfo = null;\n      // Remove stamped nodes\n      let nodes = templateInfo.childNodes;\n      for (let i=0; i<nodes.length; i++) {\n        let node = nodes[i];\n        node.parentNode.removeChild(node);\n      }\n    }\n\n    /**\n     * Overrides default `TemplateStamp` implementation to add support for\n     * parsing bindings from `TextNode`'s' `textContent`.  A `bindings`\n     * array is added to `nodeInfo` and populated with binding metadata\n     * with information capturing the binding target, and a `parts` array\n     * with one or more metadata objects capturing the source(s) of the\n     * binding.\n     *\n     * @override\n     * @param {Node} node Node to parse\n     * @param {TemplateInfo} templateInfo Template metadata for current template\n     * @param {NodeInfo} nodeInfo Node metadata for current template node\n     * @return {boolean} `true` if the visited node added node-specific\n     *   metadata to `nodeInfo`\n     * @protected\n     * @suppress {missingProperties} Interfaces in closure do not inherit statics, but classes do\n     */\n    static _parseTemplateNode(node, templateInfo, nodeInfo) {\n      let noted = super._parseTemplateNode(node, templateInfo, nodeInfo);\n      if (node.nodeType === Node.TEXT_NODE) {\n        let parts = this._parseBindings(node.textContent, templateInfo);\n        if (parts) {\n          // Initialize the textContent with any literal parts\n          // NOTE: default to a space here so the textNode remains; some browsers\n          // (IE) omit an empty textNode following cloneNode/importNode.\n          node.textContent = literalFromParts(parts) || ' ';\n          addBinding(this, templateInfo, nodeInfo, 'text', 'textContent', parts);\n          noted = true;\n        }\n      }\n      return noted;\n    }\n\n    /**\n     * Overrides default `TemplateStamp` implementation to add support for\n     * parsing bindings from attributes.  A `bindings`\n     * array is added to `nodeInfo` and populated with binding metadata\n     * with information capturing the binding target, and a `parts` array\n     * with one or more metadata objects capturing the source(s) of the\n     * binding.\n     *\n     * @override\n     * @param {Element} node Node to parse\n     * @param {TemplateInfo} templateInfo Template metadata for current template\n     * @param {NodeInfo} nodeInfo Node metadata for current template node\n     * @param {string} name Attribute name\n     * @param {string} value Attribute value\n     * @return {boolean} `true` if the visited node added node-specific\n     *   metadata to `nodeInfo`\n     * @protected\n     * @suppress {missingProperties} Interfaces in closure do not inherit statics, but classes do\n     */\n    static _parseTemplateNodeAttribute(node, templateInfo, nodeInfo, name, value) {\n      let parts = this._parseBindings(value, templateInfo);\n      if (parts) {\n        // Attribute or property\n        let origName = name;\n        let kind = 'property';\n        // The only way we see a capital letter here is if the attr has\n        // a capital letter in it per spec. In this case, to make sure\n        // this binding works, we go ahead and make the binding to the attribute.\n        if (capitalAttributeRegex.test(name)) {\n          kind = 'attribute';\n        } else if (name[name.length-1] == '$') {\n          name = name.slice(0, -1);\n          kind = 'attribute';\n        }\n        // Initialize attribute bindings with any literal parts\n        let literal = literalFromParts(parts);\n        if (literal && kind == 'attribute') {\n          node.setAttribute(name, literal);\n        }\n        // Clear attribute before removing, since IE won't allow removing\n        // `value` attribute if it previously had a value (can't\n        // unconditionally set '' before removing since attributes with `$`\n        // can't be set using setAttribute)\n        if (node.localName === 'input' && origName === 'value') {\n          node.setAttribute(origName, '');\n        }\n        // Remove annotation\n        node.removeAttribute(origName);\n        // Case hackery: attributes are lower-case, but bind targets\n        // (properties) are case sensitive. Gambit is to map dash-case to\n        // camel-case: `foo-bar` becomes `fooBar`.\n        // Attribute bindings are excepted.\n        if (kind === 'property') {\n          name = dashToCamelCase(name);\n        }\n        addBinding(this, templateInfo, nodeInfo, kind, name, parts, literal);\n        return true;\n      } else {\n        return super._parseTemplateNodeAttribute(node, templateInfo, nodeInfo, name, value);\n      }\n    }\n\n    /**\n     * Overrides default `TemplateStamp` implementation to add support for\n     * binding the properties that a nested template depends on to the template\n     * as `_host_<property>`.\n     *\n     * @override\n     * @param {Node} node Node to parse\n     * @param {TemplateInfo} templateInfo Template metadata for current template\n     * @param {NodeInfo} nodeInfo Node metadata for current template node\n     * @return {boolean} `true` if the visited node added node-specific\n     *   metadata to `nodeInfo`\n     * @protected\n     * @suppress {missingProperties} Interfaces in closure do not inherit statics, but classes do\n     */\n    static _parseTemplateNestedTemplate(node, templateInfo, nodeInfo) {\n      let noted = super._parseTemplateNestedTemplate(node, templateInfo, nodeInfo);\n      // Merge host props into outer template and add bindings\n      let hostProps = nodeInfo.templateInfo.hostProps;\n      let mode = '{';\n      for (let source in hostProps) {\n        let parts = [{ mode, source, dependencies: [source] }];\n        addBinding(this, templateInfo, nodeInfo, 'property', '_host_' + source, parts);\n      }\n      return noted;\n    }\n\n    /**\n     * Called to parse text in a template (either attribute values or\n     * textContent) into binding metadata.\n     *\n     * Any overrides of this method should return an array of binding part\n     * metadata  representing one or more bindings found in the provided text\n     * and any \"literal\" text in between.  Any non-literal parts will be passed\n     * to `_evaluateBinding` when any dependencies change.  The only required\n     * fields of each \"part\" in the returned array are as follows:\n     *\n     * - `dependencies` - Array containing trigger metadata for each property\n     *   that should trigger the binding to update\n     * - `literal` - String containing text if the part represents a literal;\n     *   in this case no `dependencies` are needed\n     *\n     * Additional metadata for use by `_evaluateBinding` may be provided in\n     * each part object as needed.\n     *\n     * The default implementation handles the following types of bindings\n     * (one or more may be intermixed with literal strings):\n     * - Property binding: `[[prop]]`\n     * - Path binding: `[[object.prop]]`\n     * - Negated property or path bindings: `[[!prop]]` or `[[!object.prop]]`\n     * - Two-way property or path bindings (supports negation):\n     *   `{{prop}}`, `{{object.prop}}`, `{{!prop}}` or `{{!object.prop}}`\n     * - Inline computed method (supports negation):\n     *   `[[compute(a, 'literal', b)]]`, `[[!compute(a, 'literal', b)]]`\n     *\n     * The default implementation uses a regular expression for best\n     * performance. However, the regular expression uses a white-list of\n     * allowed characters in a data-binding, which causes problems for\n     * data-bindings that do use characters not in this white-list.\n     *\n     * Instead of updating the white-list with all allowed characters,\n     * there is a StrictBindingParser (see lib/mixins/strict-binding-parser)\n     * that uses a state machine instead. This state machine is able to handle\n     * all characters. However, it is slightly less performant, therefore we\n     * extracted it into a separate optional mixin.\n     *\n     * @param {string} text Text to parse from attribute or textContent\n     * @param {Object} templateInfo Current template metadata\n     * @return {Array<!BindingPart>} Array of binding part metadata\n     * @protected\n     */\n    static _parseBindings(text, templateInfo) {\n      let parts = [];\n      let lastIndex = 0;\n      let m;\n      // Example: \"literal1{{prop}}literal2[[!compute(foo,bar)]]final\"\n      // Regex matches:\n      //        Iteration 1:  Iteration 2:\n      // m[1]: '{{'          '[['\n      // m[2]: ''            '!'\n      // m[3]: 'prop'        'compute(foo,bar)'\n      while ((m = bindingRegex.exec(text)) !== null) {\n        // Add literal part\n        if (m.index > lastIndex) {\n          parts.push({literal: text.slice(lastIndex, m.index)});\n        }\n        // Add binding part\n        let mode = m[1][0];\n        let negate = Boolean(m[2]);\n        let source = m[3].trim();\n        let customEvent = false, notifyEvent = '', colon = -1;\n        if (mode == '{' && (colon = source.indexOf('::')) > 0) {\n          notifyEvent = source.substring(colon + 2);\n          source = source.substring(0, colon);\n          customEvent = true;\n        }\n        let signature = parseMethod(source);\n        let dependencies = [];\n        if (signature) {\n          // Inline computed function\n          let {args, methodName} = signature;\n          for (let i=0; i<args.length; i++) {\n            let arg = args[i];\n            if (!arg.literal) {\n              dependencies.push(arg);\n            }\n          }\n          let dynamicFns = templateInfo.dynamicFns;\n          if (dynamicFns && dynamicFns[methodName] || signature.static) {\n            dependencies.push(methodName);\n            signature.dynamicFn = true;\n          }\n        } else {\n          // Property or path\n          dependencies.push(source);\n        }\n        parts.push({\n          source, mode, negate, customEvent, signature, dependencies,\n          event: notifyEvent\n        });\n        lastIndex = bindingRegex.lastIndex;\n      }\n      // Add a final literal part\n      if (lastIndex && lastIndex < text.length) {\n        let literal = text.substring(lastIndex);\n        if (literal) {\n          parts.push({\n            literal: literal\n          });\n        }\n      }\n      if (parts.length) {\n        return parts;\n      } else {\n        return null;\n      }\n    }\n\n    /**\n     * Called to evaluate a previously parsed binding part based on a set of\n     * one or more changed dependencies.\n     *\n     * @param {this} inst Element that should be used as scope for\n     *   binding dependencies\n     * @param {BindingPart} part Binding part metadata\n     * @param {string} path Property/path that triggered this effect\n     * @param {Object} props Bag of current property changes\n     * @param {Object} oldProps Bag of previous values for changed properties\n     * @param {boolean} hasPaths True with `props` contains one or more paths\n     * @return {*} Value the binding part evaluated to\n     * @protected\n     */\n    static _evaluateBinding(inst, part, path, props, oldProps, hasPaths) {\n      let value;\n      if (part.signature) {\n        value = runMethodEffect(inst, path, props, oldProps, part.signature);\n      } else if (path != part.source) {\n        value = get$0(inst, part.source);\n      } else {\n        if (hasPaths && isPath$0(path)) {\n          value = get$0(inst, path);\n        } else {\n          value = inst.__data[path];\n        }\n      }\n      if (part.negate) {\n        value = !value;\n      }\n      return value;\n    }\n\n  }\n\n  // make a typing for closure :P\n  PropertyEffectsType = PropertyEffects;\n\n  return PropertyEffects;\n});\n\n/**\n * Helper api for enqueuing client dom created by a host element.\n *\n * By default elements are flushed via `_flushProperties` when\n * `connectedCallback` is called. Elements attach their client dom to\n * themselves at `ready` time which results from this first flush.\n * This provides an ordering guarantee that the client dom an element\n * creates is flushed before the element itself (i.e. client `ready`\n * fires before host `ready`).\n *\n * However, if `_flushProperties` is called *before* an element is connected,\n * as for example `Templatize` does, this ordering guarantee cannot be\n * satisfied because no elements are connected. (Note: Bound elements that\n * receive data do become enqueued clients and are properly ordered but\n * unbound elements are not.)\n *\n * To maintain the desired \"client before host\" ordering guarantee for this\n * case we rely on the \"host stack. Client nodes registers themselves with\n * the creating host element when created. This ensures that all client dom\n * is readied in the proper order, maintaining the desired guarantee.\n *\n * @private\n */\nlet hostStack = {\n\n  stack: [],\n\n  /**\n   * @param {*} inst Instance to add to hostStack\n   * @return {void}\n   * @this {hostStack}\n   */\n  registerHost(inst) {\n    if (this.stack.length) {\n      let host = this.stack[this.stack.length-1];\n      host._enqueueClient(inst);\n    }\n  },\n\n  /**\n   * @param {*} inst Instance to begin hosting\n   * @return {void}\n   * @this {hostStack}\n   */\n  beginHosting(inst) {\n    this.stack.push(inst);\n  },\n\n  /**\n   * @param {*} inst Instance to end hosting\n   * @return {void}\n   * @this {hostStack}\n   */\n  endHosting(inst) {\n    let stackLen = this.stack.length;\n    if (stackLen && this.stack[stackLen-1] == inst) {\n      this.stack.pop();\n    }\n  }\n\n};\n","/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\nimport '../utils/boot.js';\n\nimport { dedupingMixin } from '../utils/mixin.js';\nimport { PropertiesChanged } from './properties-changed.js';\n\n/**\n * Creates a copy of `props` with each property normalized such that\n * upgraded it is an object with at least a type property { type: Type}.\n *\n * @param {Object} props Properties to normalize\n * @return {Object} Copy of input `props` with normalized properties that\n * are in the form {type: Type}\n * @private\n */\nfunction normalizeProperties(props) {\n  const output = {};\n  for (let p in props) {\n    const o = props[p];\n    output[p] = (typeof o === 'function') ? {type: o} : o;\n  }\n  return output;\n}\n\n/**\n * Mixin that provides a minimal starting point to using the PropertiesChanged\n * mixin by providing a mechanism to declare properties in a static\n * getter (e.g. static get properties() { return { foo: String } }). Changes\n * are reported via the `_propertiesChanged` method.\n *\n * This mixin provides no specific support for rendering. Users are expected\n * to create a ShadowRoot and put content into it and update it in whatever\n * way makes sense. This can be done in reaction to properties changing by\n * implementing `_propertiesChanged`.\n *\n * @mixinFunction\n * @polymer\n * @appliesMixin PropertiesChanged\n * @summary Mixin that provides a minimal starting point for using\n * the PropertiesChanged mixin by providing a declarative `properties` object.\n */\nexport const PropertiesMixin = dedupingMixin(superClass => {\n\n /**\n  * @constructor\n  * @extends {superClass}\n  * @implements {Polymer_PropertiesChanged}\n  */\n const base = PropertiesChanged(superClass);\n\n /**\n  * Returns the super class constructor for the given class, if it is an\n  * instance of the PropertiesMixin.\n  *\n  * @param {!PropertiesMixinConstructor} constructor PropertiesMixin constructor\n  * @return {PropertiesMixinConstructor} Super class constructor\n  */\n function superPropertiesClass(constructor) {\n   const superCtor = Object.getPrototypeOf(constructor);\n\n   // Note, the `PropertiesMixin` class below only refers to the class\n   // generated by this call to the mixin; the instanceof test only works\n   // because the mixin is deduped and guaranteed only to apply once, hence\n   // all constructors in a proto chain will see the same `PropertiesMixin`\n   return (superCtor.prototype instanceof PropertiesMixin) ?\n     /** @type {PropertiesMixinConstructor} */ (superCtor) : null;\n }\n\n /**\n  * Returns a memoized version of the `properties` object for the\n  * given class. Properties not in object format are converted to at\n  * least {type}.\n  *\n  * @param {PropertiesMixinConstructor} constructor PropertiesMixin constructor\n  * @return {Object} Memoized properties object\n  */\n function ownProperties(constructor) {\n   if (!constructor.hasOwnProperty(JSCompiler_renameProperty('__ownProperties', constructor))) {\n     let props = null;\n\n     if (constructor.hasOwnProperty(JSCompiler_renameProperty('properties', constructor)) && constructor.properties) {\n       props = normalizeProperties(constructor.properties);\n     }\n\n     constructor.__ownProperties = props;\n   }\n   return constructor.__ownProperties;\n }\n\n /**\n  * @polymer\n  * @mixinClass\n  * @extends {base}\n  * @implements {Polymer_PropertiesMixin}\n  * @unrestricted\n  */\n class PropertiesMixin extends base {\n\n   /**\n    * Implements standard custom elements getter to observes the attributes\n    * listed in `properties`.\n    * @suppress {missingProperties} Interfaces in closure do not inherit statics, but classes do\n    */\n   static get observedAttributes() {\n     const props = this._properties;\n     return props ? Object.keys(props).map(p => this.attributeNameForProperty(p)) : [];\n   }\n\n   /**\n    * Finalizes an element definition, including ensuring any super classes\n    * are also finalized. This includes ensuring property\n    * accessors exist on the element prototype. This method calls\n    * `_finalizeClass` to finalize each constructor in the prototype chain.\n    * @return {void}\n    */\n   static finalize() {\n     if (!this.hasOwnProperty(JSCompiler_renameProperty('__finalized', this))) {\n       const superCtor = superPropertiesClass(/** @type {PropertiesMixinConstructor} */(this));\n       if (superCtor) {\n         superCtor.finalize();\n       }\n       this.__finalized = true;\n       this._finalizeClass();\n     }\n   }\n\n   /**\n    * Finalize an element class. This includes ensuring property\n    * accessors exist on the element prototype. This method is called by\n    * `finalize` and finalizes the class constructor.\n    *\n    * @protected\n    */\n   static _finalizeClass() {\n     const props = ownProperties(/** @type {PropertiesMixinConstructor} */(this));\n     if (props) {\n       this.createProperties(props);\n     }\n   }\n\n   /**\n    * Returns a memoized version of all properties, including those inherited\n    * from super classes. Properties not in object format are converted to\n    * at least {type}.\n    *\n    * @return {Object} Object containing properties for this class\n    * @protected\n    */\n   static get _properties() {\n     if (!this.hasOwnProperty(\n       JSCompiler_renameProperty('__properties', this))) {\n       const superCtor = superPropertiesClass(/** @type {PropertiesMixinConstructor} */(this));\n       this.__properties = Object.assign({},\n         superCtor && superCtor._properties,\n         ownProperties(/** @type {PropertiesMixinConstructor} */(this)));\n     }\n     return this.__properties;\n   }\n\n   /**\n    * Overrides `PropertiesChanged` method to return type specified in the\n    * static `properties` object for the given property.\n    * @param {string} name Name of property\n    * @return {*} Type to which to deserialize attribute\n    *\n    * @protected\n    */\n   static typeForProperty(name) {\n     const info = this._properties[name];\n     return info && info.type;\n   }\n\n   /**\n    * Overrides `PropertiesChanged` method and adds a call to\n    * `finalize` which lazily configures the element's property accessors.\n    * @override\n    * @return {void}\n    */\n   _initializeProperties() {\n     this.constructor.finalize();\n     super._initializeProperties();\n   }\n\n   /**\n    * Called when the element is added to a document.\n    * Calls `_enableProperties` to turn on property system from\n    * `PropertiesChanged`.\n    * @suppress {missingProperties} Super may or may not implement the callback\n    * @return {void}\n    */\n   connectedCallback() {\n     if (super.connectedCallback) {\n       super.connectedCallback();\n     }\n     this._enableProperties();\n   }\n\n   /**\n    * Called when the element is removed from a document\n    * @suppress {missingProperties} Super may or may not implement the callback\n    * @return {void}\n    */\n   disconnectedCallback() {\n     if (super.disconnectedCallback) {\n       super.disconnectedCallback();\n     }\n   }\n\n }\n\n return PropertiesMixin;\n\n});\n","/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\nimport '../utils/boot.js';\n\nimport { rootPath as rootPath$0 } from '../utils/settings.js';\nimport { dedupingMixin } from '../utils/mixin.js';\nimport { stylesFromTemplate, stylesFromModuleImports } from '../utils/style-gather.js';\nimport { pathFromUrl, resolveCss, resolveUrl as resolveUrl$0 } from '../utils/resolve-url.js';\nimport { DomModule } from '../elements/dom-module.js';\nimport { PropertyEffects } from './property-effects.js';\nimport { PropertiesMixin } from './properties-mixin.js';\n\n/**\n * Element class mixin that provides the core API for Polymer's meta-programming\n * features including template stamping, data-binding, attribute deserialization,\n * and property change observation.\n *\n * Subclassers may provide the following static getters to return metadata\n * used to configure Polymer's features for the class:\n *\n * - `static get is()`: When the template is provided via a `dom-module`,\n *   users should return the `dom-module` id from a static `is` getter.  If\n *   no template is needed or the template is provided directly via the\n *   `template` getter, there is no need to define `is` for the element.\n *\n * - `static get template()`: Users may provide the template directly (as\n *   opposed to via `dom-module`) by implementing a static `template` getter.\n *   The getter may return an `HTMLTemplateElement` or a string, which will\n *   automatically be parsed into a template.\n *\n * - `static get properties()`: Should return an object describing\n *   property-related metadata used by Polymer features (key: property name\n *   value: object containing property metadata). Valid keys in per-property\n *   metadata include:\n *   - `type` (String|Number|Object|Array|...): Used by\n *     `attributeChangedCallback` to determine how string-based attributes\n *     are deserialized to JavaScript property values.\n *   - `notify` (boolean): Causes a change in the property to fire a\n *     non-bubbling event called `<property>-changed`. Elements that have\n *     enabled two-way binding to the property use this event to observe changes.\n *   - `readOnly` (boolean): Creates a getter for the property, but no setter.\n *     To set a read-only property, use the private setter method\n *     `_setProperty(property, value)`.\n *   - `observer` (string): Observer method name that will be called when\n *     the property changes. The arguments of the method are\n *     `(value, previousValue)`.\n *   - `computed` (string): String describing method and dependent properties\n *     for computing the value of this property (e.g. `'computeFoo(bar, zot)'`).\n *     Computed properties are read-only by default and can only be changed\n *     via the return value of the computing method.\n *\n * - `static get observers()`: Array of strings describing multi-property\n *   observer methods and their dependent properties (e.g.\n *   `'observeABC(a, b, c)'`).\n *\n * The base class provides default implementations for the following standard\n * custom element lifecycle callbacks; users may override these, but should\n * call the super method to ensure\n * - `constructor`: Run when the element is created or upgraded\n * - `connectedCallback`: Run each time the element is connected to the\n *   document\n * - `disconnectedCallback`: Run each time the element is disconnected from\n *   the document\n * - `attributeChangedCallback`: Run each time an attribute in\n *   `observedAttributes` is set or removed (note: this element's default\n *   `observedAttributes` implementation will automatically return an array\n *   of dash-cased attributes based on `properties`)\n *\n * @mixinFunction\n * @polymer\n * @appliesMixin PropertyEffects\n * @appliesMixin PropertiesMixin\n * @property rootPath {string} Set to the value of `rootPath`,\n *   which defaults to the main document path\n * @property importPath {string} Set to the value of the class's static\n *   `importPath` property, which defaults to the path of this element's\n *   `dom-module` (when `is` is used), but can be overridden for other\n *   import strategies.\n * @summary Element class mixin that provides the core API for Polymer's\n * meta-programming features.\n */\nexport const ElementMixin = dedupingMixin(base => {\n\n  /**\n   * @constructor\n   * @extends {base}\n   * @implements {Polymer_PropertyEffects}\n   * @implements {Polymer_PropertiesMixin}\n   */\n  const polymerElementBase = PropertiesMixin(PropertyEffects(base));\n\n  /**\n   * Returns a list of properties with default values.\n   * This list is created as an optimization since it is a subset of\n   * the list returned from `_properties`.\n   * This list is used in `_initializeProperties` to set property defaults.\n   *\n   * @param {PolymerElementConstructor} constructor Element class\n   * @return {PolymerElementProperties} Flattened properties for this class\n   *   that have default values\n   * @private\n   */\n  function propertyDefaults(constructor) {\n    if (!constructor.hasOwnProperty(\n      JSCompiler_renameProperty('__propertyDefaults', constructor))) {\n      constructor.__propertyDefaults = null;\n      let props = constructor._properties;\n      for (let p in props) {\n        let info = props[p];\n        if ('value' in info) {\n          constructor.__propertyDefaults = constructor.__propertyDefaults || {};\n          constructor.__propertyDefaults[p] = info;\n        }\n      }\n    }\n    return constructor.__propertyDefaults;\n  }\n\n  /**\n   * Returns a memoized version of the the `observers` array.\n   * @param {PolymerElementConstructor} constructor Element class\n   * @return {Array} Array containing own observers for the given class\n   * @protected\n   */\n  function ownObservers(constructor) {\n    if (!constructor.hasOwnProperty(\n      JSCompiler_renameProperty('__ownObservers', constructor))) {\n        constructor.__ownObservers =\n        constructor.hasOwnProperty(JSCompiler_renameProperty('observers', constructor)) ?\n        /** @type {PolymerElementConstructor} */ (constructor).observers : null;\n    }\n    return constructor.__ownObservers;\n  }\n\n  /**\n   * Creates effects for a property.\n   *\n   * Note, once a property has been set to\n   * `readOnly`, `computed`, `reflectToAttribute`, or `notify`\n   * these values may not be changed. For example, a subclass cannot\n   * alter these settings. However, additional `observers` may be added\n   * by subclasses.\n   *\n   * The info object should may contain property metadata as follows:\n   *\n   * * `type`: {function} type to which an attribute matching the property\n   * is deserialized. Note the property is camel-cased from a dash-cased\n   * attribute. For example, 'foo-bar' attribute is deserialized to a\n   * property named 'fooBar'.\n   *\n   * * `readOnly`: {boolean} creates a readOnly property and\n   * makes a private setter for the private of the form '_setFoo' for a\n   * property 'foo',\n   *\n   * * `computed`: {string} creates a computed property. A computed property\n   * also automatically is set to `readOnly: true`. The value is calculated\n   * by running a method and arguments parsed from the given string. For\n   * example 'compute(foo)' will compute a given property when the\n   * 'foo' property changes by executing the 'compute' method. This method\n   * must return the computed value.\n   *\n   * * `reflectToAttribute`: {boolean} If true, the property value is reflected\n   * to an attribute of the same name. Note, the attribute is dash-cased\n   * so a property named 'fooBar' is reflected as 'foo-bar'.\n   *\n   * * `notify`: {boolean} sends a non-bubbling notification event when\n   * the property changes. For example, a property named 'foo' sends an\n   * event named 'foo-changed' with `event.detail` set to the value of\n   * the property.\n   *\n   * * observer: {string} name of a method that runs when the property\n   * changes. The arguments of the method are (value, previousValue).\n   *\n   * Note: Users may want control over modifying property\n   * effects via subclassing. For example, a user might want to make a\n   * reflectToAttribute property not do so in a subclass. We've chosen to\n   * disable this because it leads to additional complication.\n   * For example, a readOnly effect generates a special setter. If a subclass\n   * disables the effect, the setter would fail unexpectedly.\n   * Based on feedback, we may want to try to make effects more malleable\n   * and/or provide an advanced api for manipulating them.\n   * Also consider adding warnings when an effect cannot be changed.\n   *\n   * @param {!PolymerElement} proto Element class prototype to add accessors\n   *   and effects to\n   * @param {string} name Name of the property.\n   * @param {Object} info Info object from which to create property effects.\n   * Supported keys:\n   * @param {Object} allProps Flattened map of all properties defined in this\n   *   element (including inherited properties)\n   * @return {void}\n   * @private\n   */\n  function createPropertyFromConfig(proto, name, info, allProps) {\n    // computed forces readOnly...\n    if (info.computed) {\n      info.readOnly = true;\n    }\n    // Note, since all computed properties are readOnly, this prevents\n    // adding additional computed property effects (which leads to a confusing\n    // setup where multiple triggers for setting a property)\n    // While we do have `hasComputedEffect` this is set on the property's\n    // dependencies rather than itself.\n    if (info.computed && !proto._hasReadOnlyEffect(name)) {\n      proto._createComputedProperty(name, info.computed, allProps);\n    }\n    if (info.readOnly && !proto._hasReadOnlyEffect(name)) {\n      proto._createReadOnlyProperty(name, !info.computed);\n    }\n    if (info.reflectToAttribute && !proto._hasReflectEffect(name)) {\n      proto._createReflectedProperty(name);\n    }\n    if (info.notify && !proto._hasNotifyEffect(name)) {\n      proto._createNotifyingProperty(name);\n    }\n    // always add observer\n    if (info.observer) {\n      proto._createPropertyObserver(name, info.observer, allProps[info.observer]);\n    }\n    // always create the mapping from attribute back to property for deserialization.\n    proto._addPropertyToAttributeMap(name);\n  }\n\n  /**\n   * Process all style elements in the element template. Styles with the\n   * `include` attribute are processed such that any styles in\n   * the associated \"style modules\" are included in the element template.\n   * @param {PolymerElementConstructor} klass Element class\n   * @param {!HTMLTemplateElement} template Template to process\n   * @param {string} is Name of element\n   * @param {string} baseURI Base URI for element\n   * @private\n   */\n  function processElementStyles(klass, template, is, baseURI) {\n    const templateStyles = template.content.querySelectorAll('style');\n    const stylesWithImports = stylesFromTemplate(template);\n    // insert styles from <link rel=\"import\" type=\"css\"> at the top of the template\n    const linkedStyles = stylesFromModuleImports(is);\n    const firstTemplateChild = template.content.firstElementChild;\n    for (let idx = 0; idx < linkedStyles.length; idx++) {\n      let s = linkedStyles[idx];\n      s.textContent = klass._processStyleText(s.textContent, baseURI);\n      template.content.insertBefore(s, firstTemplateChild);\n    }\n    // keep track of the last \"concrete\" style in the template we have encountered\n    let templateStyleIndex = 0;\n    // ensure all gathered styles are actually in this template.\n    for (let i = 0; i < stylesWithImports.length; i++) {\n      let s = stylesWithImports[i];\n      let templateStyle = templateStyles[templateStyleIndex];\n      // if the style is not in this template, it's been \"included\" and\n      // we put a clone of it in the template before the style that included it\n      if (templateStyle !== s) {\n        s = s.cloneNode(true);\n        templateStyle.parentNode.insertBefore(s, templateStyle);\n      } else {\n        templateStyleIndex++;\n      }\n      s.textContent = klass._processStyleText(s.textContent, baseURI);\n    }\n    if (window.ShadyCSS) {\n      window.ShadyCSS.prepareTemplate(template, is);\n    }\n  }\n\n  /**\n   * @polymer\n   * @mixinClass\n   * @unrestricted\n   * @implements {Polymer_ElementMixin}\n   */\n  class PolymerElement extends polymerElementBase {\n\n    /**\n     * Override of PropertiesMixin _finalizeClass to create observers and\n     * find the template.\n     * @return {void}\n     * @protected\n     * @override\n     * @suppress {missingProperties} Interfaces in closure do not inherit statics, but classes do\n     */\n   static _finalizeClass() {\n      super._finalizeClass();\n      if (this.hasOwnProperty(\n        JSCompiler_renameProperty('is', this)) &&  this.is) {\n        register(this.prototype);\n      }\n      const observers = ownObservers(this);\n      if (observers) {\n        this.createObservers(observers, this._properties);\n      }\n      // note: create \"working\" template that is finalized at instance time\n      let template = /** @type {PolymerElementConstructor} */ (this).template;\n      if (template) {\n        if (typeof template === 'string') {\n          console.error('template getter must return HTMLTemplateElement');\n          template = null;\n        } else {\n          template = template.cloneNode(true);\n        }\n      }\n\n      this.prototype._template = template;\n    }\n\n    /**\n     * Override of PropertiesChanged createProperties to create accessors\n     * and property effects for all of the properties.\n     * @return {void}\n     * @protected\n     * @override\n     */\n     static createProperties(props) {\n      for (let p in props) {\n        createPropertyFromConfig(this.prototype, p, props[p], props);\n      }\n    }\n\n    /**\n     * Creates observers for the given `observers` array.\n     * Leverages `PropertyEffects` to create observers.\n     * @param {Object} observers Array of observer descriptors for\n     *   this class\n     * @param {Object} dynamicFns Object containing keys for any properties\n     *   that are functions and should trigger the effect when the function\n     *   reference is changed\n     * @return {void}\n     * @protected\n     */\n    static createObservers(observers, dynamicFns) {\n      const proto = this.prototype;\n      for (let i=0; i < observers.length; i++) {\n        proto._createMethodObserver(observers[i], dynamicFns);\n      }\n    }\n\n    /**\n     * Returns the template that will be stamped into this element's shadow root.\n     *\n     * If a `static get is()` getter is defined, the default implementation\n     * will return the first `<template>` in a `dom-module` whose `id`\n     * matches this element's `is`.\n     *\n     * Users may override this getter to return an arbitrary template\n     * (in which case the `is` getter is unnecessary). The template returned\n     * may be either an `HTMLTemplateElement` or a string that will be\n     * automatically parsed into a template.\n     *\n     * Note that when subclassing, if the super class overrode the default\n     * implementation and the subclass would like to provide an alternate\n     * template via a `dom-module`, it should override this getter and\n     * return `DomModule.import(this.is, 'template')`.\n     *\n     * If a subclass would like to modify the super class template, it should\n     * clone it rather than modify it in place.  If the getter does expensive\n     * work such as cloning/modifying a template, it should memoize the\n     * template for maximum performance:\n     *\n     *   let memoizedTemplate;\n     *   class MySubClass extends MySuperClass {\n     *     static get template() {\n     *       if (!memoizedTemplate) {\n     *         memoizedTemplate = super.template.cloneNode(true);\n     *         let subContent = document.createElement('div');\n     *         subContent.textContent = 'This came from MySubClass';\n     *         memoizedTemplate.content.appendChild(subContent);\n     *       }\n     *       return memoizedTemplate;\n     *     }\n     *   }\n     *\n     * @return {HTMLTemplateElement|string} Template to be stamped\n     */\n    static get template() {\n      if (!this.hasOwnProperty(JSCompiler_renameProperty('_template', this))) {\n        this._template = DomModule && DomModule.import(\n          /** @type {PolymerElementConstructor}*/ (this).is, 'template') ||\n          // note: implemented so a subclass can retrieve the super\n          // template; call the super impl this way so that `this` points\n          // to the superclass.\n          Object.getPrototypeOf(/** @type {PolymerElementConstructor}*/ (this).prototype).constructor.template;\n      }\n      return this._template;\n    }\n\n    /**\n     * Path matching the url from which the element was imported.\n     *\n     * This path is used to resolve url's in template style cssText.\n     * The `importPath` property is also set on element instances and can be\n     * used to create bindings relative to the import path.\n     *\n     * For elements defined in ES modules, users should implement\n     * `static get importMeta() { return import.meta; }`, and the default\n     * implementation of `importPath` will  return `import.meta.url`'s path.\n     * For elements defined in HTML imports, this getter will return the path\n     * to the document containing a `dom-module` element matching this\n     * element's static `is` property.\n     *\n     * Note, this path should contain a trailing `/`.\n     *\n     * @return {string} The import path for this element class\n     * @suppress {missingProperties}\n     */\n    static get importPath() {\n      if (!this.hasOwnProperty(JSCompiler_renameProperty('_importPath', this))) {\n        const meta = this.importMeta;\n        if (meta) {\n          this._importPath = pathFromUrl(meta.url);\n        } else {\n          const module = DomModule && DomModule.import(/** @type {PolymerElementConstructor} */ (this).is);\n          this._importPath = (module && module.assetpath) ||\n            Object.getPrototypeOf(/** @type {PolymerElementConstructor}*/ (this).prototype).constructor.importPath;\n        }\n      }\n      return this._importPath;\n    }\n\n    constructor() {\n      super();\n      /** @type {HTMLTemplateElement} */\n      this._template;\n      /** @type {string} */\n      this._importPath;\n      /** @type {string} */\n      this.rootPath;\n      /** @type {string} */\n      this.importPath;\n      /** @type {StampedTemplate | HTMLElement | ShadowRoot} */\n      this.root;\n      /** @type {!Object<string, !Element>} */\n      this.$;\n    }\n\n    /**\n     * Overrides the default `PropertyAccessors` to ensure class\n     * metaprogramming related to property accessors and effects has\n     * completed (calls `finalize`).\n     *\n     * It also initializes any property defaults provided via `value` in\n     * `properties` metadata.\n     *\n     * @return {void}\n     * @override\n     * @suppress {invalidCasts}\n     */\n    _initializeProperties() {\n      instanceCount++;\n      this.constructor.finalize();\n      // note: finalize template when we have access to `localName` to\n      // avoid dependence on `is` for polyfilling styling.\n      this.constructor._finalizeTemplate(/** @type {!HTMLElement} */(this).localName);\n      super._initializeProperties();\n      // set path defaults\n      this.rootPath = rootPath$0;\n      this.importPath = this.constructor.importPath;\n      // apply property defaults...\n      let p$ = propertyDefaults(this.constructor);\n      if (!p$) {\n        return;\n      }\n      for (let p in p$) {\n        let info = p$[p];\n        // Don't set default value if there is already an own property, which\n        // happens when a `properties` property with default but no effects had\n        // a property set (e.g. bound) by its host before upgrade\n        if (!this.hasOwnProperty(p)) {\n          let value = typeof info.value == 'function' ?\n            info.value.call(this) :\n            info.value;\n          // Set via `_setProperty` if there is an accessor, to enable\n          // initializing readOnly property defaults\n          if (this._hasAccessor(p)) {\n            this._setPendingProperty(p, value, true);\n          } else {\n            this[p] = value;\n          }\n        }\n      }\n    }\n\n    /**\n     * Gather style text for a style element in the template.\n     *\n     * @param {string} cssText Text containing styling to process\n     * @param {string} baseURI Base URI to rebase CSS paths against\n     * @return {string} The processed CSS text\n     * @protected\n     */\n    static _processStyleText(cssText, baseURI) {\n      return resolveCss(cssText, baseURI);\n    }\n\n    /**\n    * Configures an element `proto` to function with a given `template`.\n    * The element name `is` and extends `ext` must be specified for ShadyCSS\n    * style scoping.\n    *\n    * @param {string} is Tag name (or type extension name) for this element\n    * @return {void}\n    * @protected\n    */\n    static _finalizeTemplate(is) {\n      /** @const {HTMLTemplateElement} */\n      const template = this.prototype._template;\n      if (template && !template.__polymerFinalized) {\n        template.__polymerFinalized = true;\n        const importPath = this.importPath;\n        const baseURI = importPath ? resolveUrl$0(importPath) : '';\n        // e.g. support `include=\"module-name\"`, and ShadyCSS\n        processElementStyles(this, template, is, baseURI);\n        this.prototype._bindTemplate(template);\n      }\n    }\n\n    /**\n     * Provides a default implementation of the standard Custom Elements\n     * `connectedCallback`.\n     *\n     * The default implementation enables the property effects system and\n     * flushes any pending properties, and updates shimmed CSS properties\n     * when using the ShadyCSS scoping/custom properties polyfill.\n     *\n     * @suppress {missingProperties, invalidCasts} Super may or may not implement the callback\n     * @return {void}\n     */\n    connectedCallback() {\n      if (window.ShadyCSS && this._template) {\n        window.ShadyCSS.styleElement(/** @type {!HTMLElement} */(this));\n      }\n      super.connectedCallback();\n    }\n\n    /**\n     * Stamps the element template.\n     *\n     * @return {void}\n     * @override\n     */\n    ready() {\n      if (this._template) {\n        this.root = this._stampTemplate(this._template);\n        this.$ = this.root.$;\n      }\n      super.ready();\n    }\n\n    /**\n     * Implements `PropertyEffects`'s `_readyClients` call. Attaches\n     * element dom by calling `_attachDom` with the dom stamped from the\n     * element's template via `_stampTemplate`. Note that this allows\n     * client dom to be attached to the element prior to any observers\n     * running.\n     *\n     * @return {void}\n     * @override\n     */\n    _readyClients() {\n      if (this._template) {\n        this.root = this._attachDom(/** @type {StampedTemplate} */(this.root));\n      }\n      // The super._readyClients here sets the clients initialized flag.\n      // We must wait to do this until after client dom is created/attached\n      // so that this flag can be checked to prevent notifications fired\n      // during this process from being handled before clients are ready.\n      super._readyClients();\n    }\n\n\n    /**\n     * Attaches an element's stamped dom to itself. By default,\n     * this method creates a `shadowRoot` and adds the dom to it.\n     * However, this method may be overridden to allow an element\n     * to put its dom in another location.\n     *\n     * @throws {Error}\n     * @suppress {missingReturn}\n     * @param {StampedTemplate} dom to attach to the element.\n     * @return {ShadowRoot} node to which the dom has been attached.\n     */\n    _attachDom(dom) {\n      if (this.attachShadow) {\n        if (dom) {\n          if (!this.shadowRoot) {\n            this.attachShadow({mode: 'open'});\n          }\n          this.shadowRoot.appendChild(dom);\n          return this.shadowRoot;\n        }\n        return null;\n      } else {\n        throw new Error('ShadowDOM not available. ' +\n          // TODO(sorvell): move to compile-time conditional when supported\n        'PolymerElement can create dom as children instead of in ' +\n        'ShadowDOM by setting `this.root = this;\\` before \\`ready\\`.');\n      }\n    }\n\n    /**\n     * When using the ShadyCSS scoping and custom property shim, causes all\n     * shimmed styles in this element (and its subtree) to be updated\n     * based on current custom property values.\n     *\n     * The optional parameter overrides inline custom property styles with an\n     * object of properties where the keys are CSS properties, and the values\n     * are strings.\n     *\n     * Example: `this.updateStyles({'--color': 'blue'})`\n     *\n     * These properties are retained unless a value of `null` is set.\n     *\n     * Note: This function does not support updating CSS mixins.\n     * You can not dynamically change the value of an `@apply`.\n     *\n     * @param {Object=} properties Bag of custom property key/values to\n     *   apply to this element.\n     * @return {void}\n     * @suppress {invalidCasts}\n     */\n    updateStyles(properties) {\n      if (window.ShadyCSS) {\n        window.ShadyCSS.styleSubtree(/** @type {!HTMLElement} */(this), properties);\n      }\n    }\n\n    /**\n     * Rewrites a given URL relative to a base URL. The base URL defaults to\n     * the original location of the document containing the `dom-module` for\n     * this element. This method will return the same URL before and after\n     * bundling.\n     *\n     * Note that this function performs no resolution for URLs that start\n     * with `/` (absolute URLs) or `#` (hash identifiers).  For general purpose\n     * URL resolution, use `window.URL`.\n     *\n     * @param {string} url URL to resolve.\n     * @param {string=} base Optional base URL to resolve against, defaults\n     * to the element's `importPath`\n     * @return {string} Rewritten URL relative to base\n     */\n    resolveUrl(url, base) {\n      if (!base && this.importPath) {\n        base = resolveUrl$0(this.importPath);\n      }\n      return resolveUrl$0(url, base);\n    }\n\n    /**\n     * Overrides `PropertyAccessors` to add map of dynamic functions on\n     * template info, for consumption by `PropertyEffects` template binding\n     * code. This map determines which method templates should have accessors\n     * created for them.\n     *\n     * @override\n     * @suppress {missingProperties} Interfaces in closure do not inherit statics, but classes do\n     */\n    static _parseTemplateContent(template, templateInfo, nodeInfo) {\n      templateInfo.dynamicFns = templateInfo.dynamicFns || this._properties;\n      return super._parseTemplateContent(template, templateInfo, nodeInfo);\n    }\n\n  }\n\n  return PolymerElement;\n});\n\n/**\n * Provides basic tracking of element definitions (registrations) and\n * instance counts.\n *\n * @summary Provides basic tracking of element definitions (registrations) and\n * instance counts.\n */\n`TODO(modulizer): A namespace named Polymer.telemetry was\ndeclared here. The surrounding comments should be reviewed,\nand this string can then be deleted`;\n\n/**\n * Total number of Polymer element instances created.\n * @type {number}\n */\nexport let instanceCount = 0;\n\n/**\n * Array of Polymer element classes that have been finalized.\n * @type {Array<PolymerElement>}\n */\nexport const registrations = [];\n\n/**\n * @param {!PolymerElementConstructor} prototype Element prototype to log\n * @this {this}\n * @private\n */\nfunction _regLog(prototype) {\n  console.log('[' + prototype.is + ']: registered');\n}\n\n/**\n * Registers a class prototype for telemetry purposes.\n * @param {HTMLElement} prototype Element prototype to register\n * @this {this}\n * @protected\n */\nexport function register(prototype) {\n  registrations.push(prototype);\n  undefined && _regLog(prototype);\n}\n\n/**\n * Logs all elements registered with an `is` to the console.\n * @public\n * @this {this}\n */\nexport function dumpRegistrations() {\n  registrations.forEach(_regLog);\n}\n\n/**\n * When using the ShadyCSS scoping and custom property shim, causes all\n * shimmed `styles` (via `custom-style`) in the document (and its subtree)\n * to be updated based on current custom property values.\n *\n * The optional parameter overrides inline custom property styles with an\n * object of properties where the keys are CSS properties, and the values\n * are strings.\n *\n * Example: `updateStyles({'--color': 'blue'})`\n *\n * These properties are retained unless a value of `null` is set.\n *\n * @param {Object=} props Bag of custom property key/values to\n *   apply to the document.\n * @return {void}\n */\nexport const updateStyles = function(props) {\n  if (window.ShadyCSS) {\n    window.ShadyCSS.styleDocument(props);\n  }\n};\n","/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\nimport './boot.js';\n\n/**\n * Class representing a static string value which can be used to filter\n * strings by asseting that they have been created via this class. The\n * `value` property returns the string passed to the constructor.\n */\nclass LiteralString {\n  constructor(string) {\n    /** @type {string} */\n    this.value = string.toString();\n  }\n  /**\n   * @return {string} LiteralString string value\n   */\n  toString() {\n    return this.value;\n  }\n}\n\n/**\n * @param {*} value Object to stringify into HTML\n * @return {string} HTML stringified form of `obj`\n */\nfunction literalValue(value) {\n  if (value instanceof LiteralString) {\n    return /** @type {!LiteralString} */(value).value;\n  } else {\n    throw new Error(\n        `non-literal value passed to Polymer's htmlLiteral function: ${value}`\n    );\n  }\n}\n\n/**\n * @param {*} value Object to stringify into HTML\n * @return {string} HTML stringified form of `obj`\n */\nfunction htmlValue(value) {\n  if (value instanceof HTMLTemplateElement) {\n    return /** @type {!HTMLTemplateElement } */(value).innerHTML;\n  } else if (value instanceof LiteralString) {\n    return literalValue(value);\n  } else {\n    throw new Error(\n        `non-template value passed to Polymer's html function: ${value}`);\n  }\n}\n\n/**\n * A template literal tag that creates an HTML <template> element from the\n * contents of the string.\n *\n * This allows you to write a Polymer Template in JavaScript.\n *\n * Templates can be composed by interpolating `HTMLTemplateElement`s in\n * expressions in the JavaScript template literal. The nested template's\n * `innerHTML` is included in the containing template.  The only other\n * values allowed in expressions are those returned from `htmlLiteral`\n * which ensures only literal values from JS source ever reach the HTML, to\n * guard against XSS risks.\n *\n * All other values are disallowed in expressions to help prevent XSS\n * attacks; however, `htmlLiteral` can be used to compose static\n * string values into templates. This is useful to compose strings into\n * places that do not accept html, like the css text of a `style`\n * element.\n *\n * Example:\n *\n *     static get template() {\n *       return html`\n *         <style>:host{ content:\"...\" }</style>\n *         <div class=\"shadowed\">${this.partialTemplate}</div>\n *         ${super.template}\n *       `;\n *     }\n *     static get partialTemplate() { return html`<span>Partial!</span>`; }\n *\n * @param {!ITemplateArray} strings Constant parts of tagged template literal\n * @param {...*} values Variable parts of tagged template literal\n * @return {!HTMLTemplateElement} Constructed HTMLTemplateElement\n */\nexport const html = function html(strings, ...values) {\n  const template = /** @type {!HTMLTemplateElement} */(document.createElement('template'));\n  template.innerHTML = values.reduce((acc, v, idx) =>\n      acc + htmlValue(v) + strings[idx + 1], strings[0]);\n  return template;\n};\n\n/**\n * An html literal tag that can be used with `html` to compose.\n * a literal string.\n *\n * Example:\n *\n *     static get template() {\n *       return html`\n *         <style>\n *           :host { display: block; }\n *           ${this.styleTemplate()}\n *         </style>\n *         <div class=\"shadowed\">${staticValue}</div>\n *         ${super.template}\n *       `;\n *     }\n *     static get styleTemplate() {\n *        return htmlLiteral`.shadowed { background: gray; }`;\n *     }\n *\n * @param {!ITemplateArray} strings Constant parts of tagged template literal\n * @param {...*} values Variable parts of tagged template literal\n * @return {!LiteralString} Constructed literal string\n */\nexport const htmlLiteral = function(strings, ...values) {\n  return new LiteralString(values.reduce((acc, v, idx) =>\n      acc + literalValue(v) + strings[idx + 1], strings[0]));\n};\n","/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\nimport { ElementMixin } from './lib/mixins/element-mixin.js';\nexport { html } from './lib/utils/html-tag.js';\n\n/**\n * Base class that provides the core API for Polymer's meta-programming\n * features including template stamping, data-binding, attribute deserialization,\n * and property change observation.\n *\n * @customElement\n * @polymer\n * @constructor\n * @implements {Polymer_ElementMixin}\n * @extends HTMLElement\n * @appliesMixin ElementMixin\n * @summary Custom element base class that provides the core API for Polymer's\n *   key meta-programming features including template stamping, data-binding,\n *   attribute deserialization, and property change observation\n */\nexport const PolymerElement = ElementMixin(HTMLElement);\n\n","import {html, PolymerElement} from './node_modules/@polymer/polymer/polymer-element.js';\n\n/**\n * `stb-topmenu`\n * Global top menu for STB\n *\n * @customElement\n * @polymer\n * @demo demo/index.html\n */\nclass StbTopmenu extends PolymerElement {\n  static get template() {\n    return html`\n    <style>\n    header {\n      width: 100%;\n      margin: 0;\n      background-color: #fff;\n      border-bottom: 1px rgba(0, 0, 0, 0.2) solid;\n      box-shadow: 0 1px 12px 0 rgba(0, 0, 0, 0.11);\n      border-top: 4px #da291c solid;\n      height: 60px;\n      z-index: 1;\n    }\n\n    header .top-menu {\n      width: 95%;\n      max-width: 1200px;\n      margin: 0 auto;\n      display: flex;\n      align-items: center;\n      justify-content: center;\n    }\n\n    header img.stb-logo {\n      width: 165px;\n      height: 42px;\n      cursor: pointer;\n    }\n\n    header .top-menu > section.top-menu-buttons {\n      height: 52px;\n      margin-left: auto;\n      display: inline-flex;\n    }\n\n\n    /* individual buttons */\n    header .top-menu .top-menu-buttons button {\n      position: relative; /* needed for positioning dropdowns */\n      /* height: 52px; */\n      background-color: transparent;\n      border: none;\n      /* border: 1px solid red; */\n      font-size: 16px;\n      font-family: \"Helvetica Neue\", Times;\n      cursor: pointer;\n      display: flex;\n      align-items: center;\n      justify-content: center;\n      margin-right: 8px;\n    }\n    header .top-menu .top-menu-buttons button svg {\n      margin-right: 8px;\n    }\n\n    </style>\n    <header>\n    <div class=\"top-menu\">\n      <!-- inline style on this element to avoid flickering on pageload -->\n      <svg id=\"stblogo\" data-name=\"Logo\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 147.4 17.92\" class=\"stb-logo\" style=\"width: 165px; height: 42px;\">\n      <defs>\n          <style>\n          .cls-1 {\n              fill: #fff;\n          }\n          .cls-2,\n          .cls-3 {\n              fill: #d92e27;\n          }\n          .cls-2 {\n              fill-rule: evenodd;\n          }\n          </style>\n      </defs>\n      <title>Storebrand logo</title>\n      <path class=\"cls-1\" d=\"M31.89,10.1V10a8.42,8.42,0,0,0-2.14-5.59,8.23,8.23,0,0,0-11-.42,14.55,14.55,0,0,0-2.79-.26A13.76,13.76,0,0,0,13.19,4h0A8.14,8.14,0,0,0,7.89,2.07,8.12,8.12,0,0,0,0,10c0,.06,0,.11,0,.17s0,.23,0,.35a7.13,7.13,0,0,0,2.14,5.07,8.17,8.17,0,0,0,5.76,2.34,8,8,0,0,0,6.1-2.7,16.13,16.13,0,0,0,1.94.12,15.82,15.82,0,0,0,2-.12A8,8,0,0,0,24,17.92a8.17,8.17,0,0,0,5.76-2.34,7.14,7.14,0,0,0,2.14-5.07C31.9,10.38,31.9,10.24,31.89,10.1ZM5.15,11.8a3.35,3.35,0,0,1-.94-1.75,3.31,3.31,0,0,1,.95-1.86,3.85,3.85,0,0,1,2.3-1.08v3.46a3.38,3.38,0,0,0,1,2.31,4.3,4.3,0,0,1-.55,0A3.89,3.89,0,0,1,5.15,11.8ZM24,12.91a4.23,4.23,0,0,1-.59,0,3.41,3.41,0,0,0,1-2.33V7.11a3.86,3.86,0,0,1,2.33,1.09,3.32,3.32,0,0,1,.95,1.86A3.67,3.67,0,0,1,24,12.91Z\" />\n      <path class=\"cls-2\" d=\"M7.89,14.52a4.15,4.15,0,0,1-4.29-4,4.15,4.15,0,0,1,4.29-4,4.34,4.34,0,0,1,3.73,2,5.37,5.37,0,0,0,3.56,1.31A7.17,7.17,0,0,0,7.89,3.68,7.09,7.09,0,0,0,.58,10.51a7.09,7.09,0,0,0,7.32,6.83,7.54,7.54,0,0,0,5.41-2.23A10.8,10.8,0,0,1,10,14,4.5,4.5,0,0,1,7.89,14.52Z\" />\n      <path class=\"cls-3\" d=\"M24,3.68a7.16,7.16,0,0,0-7.28,6.17,5.37,5.37,0,0,0,3.55-1.31,4.34,4.34,0,0,1,3.73-2,4.15,4.15,0,0,1,4.29,4,4.15,4.15,0,0,1-4.29,4,4.5,4.5,0,0,1-2.1-.51,10.68,10.68,0,0,1-3.31,1.1A7.54,7.54,0,0,0,24,17.35a7.09,7.09,0,0,0,7.32-6.83A7.09,7.09,0,0,0,24,3.68Z\" />\n      <path class=\"cls-2\" d=\"M23.84,10.54V8.28h-.08c-.53,1.94-3.83,3.43-7.83,3.43S8.63,10.2,8.11,8.26h0l0,0H8v2.26a2.79,2.79,0,0,0,1.23,2.13,10.29,10.29,0,0,0,5.35,1.79c.43,0,.87.05,1.32.05s.92,0,1.36-.06a10.23,10.23,0,0,0,5.33-1.8A2.79,2.79,0,0,0,23.84,10.54Z\" />\n      <path class=\"cls-3\" d=\"M16,8.9l.11,0a7.71,7.71,0,0,1,1.66-3.4,9.46,9.46,0,0,0-1.8-.17,9.22,9.22,0,0,0-1.75.16,7.68,7.68,0,0,1,1.66,3.41Z\" />\n      <path d=\"M38.55,7.79c0-1.34,1.77-1.51,2.87-1.51a18.38,18.38,0,0,1,3.26.37V4.94A22.56,22.56,0,0,0,41,4.62c-2.26,0-4.66.73-4.66,3.32,0,2.2,1.81,2.8,3.39,3.21,1.12.28,3.43.41,3.43,1.94,0,1.27-1.6,1.66-3.19,1.66a17.27,17.27,0,0,1-3.56-.52V16a20.16,20.16,0,0,0,3.84.41c3.34,0,5.16-1.38,5.16-3.6C45.43,8.48,38.55,10.25,38.55,7.79Z\" />\n      <path d=\"M51.25.78c-.86.28-1.79.6-2.16.73V4.85H46.72v1.6H49.1v6.92c0,2.65,1.14,2.8,3.43,2.8h1.9V14.52h-1.7c-1.08,0-1.47-.09-1.47-1.36V6.45h3.26V4.85H51.25Z\" />\n      <path d=\"M61.84,4.57c-3.62,0-5.72,2.24-5.72,5.87s2.07,6,5.72,6c3.34,0,5.72-2.5,5.72-6S65.45,4.57,61.84,4.57Zm0,10.27c-2.24,0-3.41-1.73-3.41-4.4s1.19-4.25,3.41-4.25,3.41,1.6,3.41,4.25S64.09,14.84,61.84,14.84Z\" />\n      <path d=\"M72.16,4.85h-2V16.18h2.16V7.61c1.14-.8,2.2-.88,4.36-.88v-2A7.3,7.3,0,0,0,72.16,6Z\" />\n      <path d=\"M83.35,4.62C80.44,4.62,78,6.3,78,10.29s2.2,6.15,6.19,6.15A14.58,14.58,0,0,0,87.95,16V14.49a17.19,17.19,0,0,1-3.08.32c-1.64,0-4.16-.11-4.53-3.6h8.5v-.56C88.83,7,87.25,4.62,83.35,4.62Zm-3,5.07c.06-2.22,1.08-3.54,3-3.54,2.26,0,3,1.49,3,3.54Z\" />\n      <path d=\"M95.86,4.55a18.87,18.87,0,0,0-2.52.17V0H91.18V16a26.6,26.6,0,0,0,4.06.37c3.58,0,6.26-2.14,6.26-5.89S99.31,4.55,95.86,4.55Zm-.63,10.22a12.75,12.75,0,0,1-1.92-.13V6.34a15.41,15.41,0,0,1,2-.15c2.7,0,3.93,1.53,3.93,4.31C99.2,13.11,97.87,14.78,95.24,14.78Z\" />\n      <path d=\"M106.08,4.85h-2V16.18h2.16V7.61c1.14-.8,2.2-.88,4.36-.88v-2A7.3,7.3,0,0,0,106.08,6Z\" />\n      <path d=\"M116.37,4.62a19.91,19.91,0,0,0-4,.41V6.71a22.33,22.33,0,0,1,3.75-.45c3.15,0,3.26.58,3.26,3-.75,0-1.34-.06-1.83-.06-2.37,0-6,0-6,3.54,0,3.06,2,3.71,5,3.71a41.87,41.87,0,0,0,5-.26V8.37C121.55,5,119.52,4.62,116.37,4.62Zm3,10.14c-1.1.06-1.53.11-2.11.11-1.73,0-3.45-.19-3.45-2.09,0-1.66,1.38-2,3.64-2,.32,0,1,0,1.92.06Z\" />\n      <path d=\"M131.28,4.62c-1.55,0-2.33.26-4.57,1.25v-1h-2V16.18h2.13V7.46a11.5,11.5,0,0,1,3.69-1c1.94,0,2,1.32,2,2.52v7.23h2.18V8.07A3.22,3.22,0,0,0,131.28,4.62Z\" />\n      <path d=\"M147.39,0h-2.16V4.68a15.37,15.37,0,0,0-2.46-.15C139.07,4.53,137,7,137,10.59c0,3.82,2.67,5.82,6.26,5.82a27.56,27.56,0,0,0,4.12-.39C147.41,13.48,147.39,4.21,147.39,0Zm-2.16,14.67c-.93.09-1.47.11-1.88.11-2.59,0-4-1.73-4-4.25,0-3,1.38-4.34,3.93-4.34a11.89,11.89,0,0,1,2,.19Z\" />\n  </svg>\n\n      <section class=\"top-menu-buttons\" aria-label=\"Top menu\">\n        <!-- back button here, only show on subpages -->\n        <button style=\"display: {{displayback}}\">\n          <svg role=\"presentation\" width=\"23px\" height=\"23px\" viewBox=\"0 0 23 23\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n            <g stroke=\"none\" stroke-width=\"1\" fill=\"none\" fill-rule=\"evenodd\">\n              <g transform=\"translate(-881.000000, -25.000000)\" fill=\"#404040\">\n                <g transform=\"translate(881.000000, 15.000000)\">\n                  <g transform=\"translate(0.000000, 10.000000)\">\n                    <g>\n                      <polygon points=\"7 7 0 7 0 0 7 0\"></polygon>\n                      <polygon points=\"15 7 8 7 8 0 15 0\"></polygon>\n                      <polygon points=\"7 15 0 15 0 8 7 8\"></polygon>\n                      <polygon points=\"23 15 16 15 16 8 23 8\"></polygon>\n                      <polygon points=\"15 15 8 15 8 8 15 8\"></polygon>\n                      <polygon points=\"7 23 0 23 0 16 7 16\"></polygon>\n                      <polygon points=\"15 23 8 23 8 16 15 16\"></polygon>\n                      <polygon points=\"23 7 16 7 16 0 23 0\"></polygon>\n                    </g>\n                  </g>\n                </g>\n              </g>\n            </g>\n          </svg>\n          <span>{{back}}</span>\n        </button>\n\n        <button id=\"settingsButton\"\n        aria-haspopup=\"true\"\n        aria-expanded=\"false\"> <!-- TODO: needs to change when clicked -->\n        <svg width=\"26px\" height=\"26px\" viewBox=\"0 0 26 26\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n          <g stroke=\"none\" stroke-width=\"1\" fill=\"none\" fill-rule=\"evenodd\">\n            <g transform=\"translate(1.000000, 1.000000)\" fill-rule=\"nonzero\" stroke=\"#404040\">\n              <path fill=\"#404040\" d=\"M20.6127652,13.5652174 L23.9998957,13.5652174 L23.9998957,10.4347826 L20.6117217,10.4347826 C20.3936348,9.53008696 20.0367652,8.15947826 19.565113,7.38573913 L21.9609391,4.99043478 L19.0089391,2.03895652 L16.6125913,4.43478261 C15.8393739,3.96313043 14.4703304,3.60626087 13.565113,3.38817391 L13.565113,0 L10.4346783,0 L10.4346783,3.38817391 C9.52998261,3.60626087 8.15937391,3.96313043 7.38667826,4.43478261 L4.99033043,2.03895652 L2.03833043,4.99043478 L4.43467826,7.38678261 C3.96250435,8.15947826 3.60615652,9.53008696 3.38650435,10.4347826 L-0.000104347826,10.4347826 L-0.000104347826,13.5652174 L3.38650435,13.5652174 C3.60615652,14.469913 3.96250435,15.8405217 4.43467826,16.6132174 L2.0378087,19.0095652 L4.99033043,21.9610435 L7.38563478,19.5641739 C8.15937391,20.0368696 9.52998261,20.3937391 10.4346783,20.6128696 L10.4346783,24 L13.565113,24 L13.565113,20.6128696 C14.4703304,20.3937391 15.8404174,20.0368696 16.6125913,19.5652174 L19.0099826,21.9610435 L21.9609391,19.0095652 L19.565113,16.6132174 C20.0367652,15.8405217 20.3936348,14.469913 20.6127652,13.5652174 Z\"></path>\n              <path fill=\"#FFFFFF\" d=\"M16.6956522,12 C16.6956522,14.5935652 14.5935652,16.6956522 12,16.6956522 C9.40643478,16.6956522 7.30434783,14.5935652 7.30434783,12 C7.30434783,9.40643478 9.40643478,7.30434783 12,7.30434783 C14.5935652,7.30434783 16.6956522,9.40643478 16.6956522,12 Z\"></path>\n            </g>\n          </g>\n        </svg>\n        <span id=\"settings\">{{settings}}</span>\n      </button>\n\n      <button\n      id=\"service\"\n      aria-haspopup=\"true\"\n      aria-expanded=\"false\"> <!-- TODO make it dynamic -->\n      <svg width=\"32px\" height=\"29px\" viewBox=\"0 0 32 29\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n        <g stroke=\"none\" stroke-width=\"1\" fill=\"none\" fill-rule=\"evenodd\">\n          <g transform=\"translate(0.000000, 1.000000)\">\n            <g transform=\"translate(0.000000, 7.000000)\" fill=\"#404040\" fill-rule=\"nonzero\">\n              <path d=\"M22.5208333,9.43358183 C22.5208333,14.3790818 17.5873333,18.3900818 11.5,18.3900818 C10.1410833,18.3900818 8.840625,18.1896272 7.638875,17.8240363 L1.30525,20.7602182 L3.78541667,15.8290363 C1.745125,14.2034454 0.479166667,11.9383091 0.479166667,9.43358183 C0.479166667,4.48712728 5.41266667,0.477081818 11.5,0.477081818 C17.5873333,0.477081818 22.5208333,4.48712728 22.5208333,9.43358183 Z\"></path>\n            </g>\n            <g transform=\"translate(8.000000, 0.000000)\">\n              <g>\n                <g fill=\"#DA291B\">\n                  <rect x=\"0\" y=\"0\" width=\"23\" height=\"17\" rx=\"8\"></rect>\n                </g>\n                <rect stroke=\"#FFFFFF\" stroke-width=\"2\" x=\"0\" y=\"0\" width=\"23\" height=\"17\" rx=\"8\"></rect>\n              </g>\n              <g transform=\"translate(7.666667, 0.944444)\" fill=\"#FFFFFF\" font-family=\"HelveticaNeue, Helvetica Neue\" font-size=\"14\" font-weight=\"normal\" id=\"customerServiceCounter\">\n                <text><tspan x=\"0.1035\" y=\"13.300763\">{{notifications}}</tspan></text>\n              </g>\n            </g>\n          </g>\n        </g>\n      </svg>\n      <span>{{service}}</span>\n    </button>\n  </section>\n\n</div>\n\n</header>\n    `;\n  }\n  static get properties() {\n    return {\n      back: {\n        type: String\n      },\n      settings: {\n        type: String\n      },\n      service: {\n        type: String\n      },\n      notifications: {\n        type: String\n      },\n      displayback: {\n        type: String,\n        value: false,\n        notify: true,\n        reflectToAttribute: true\n      },\n    };\n  }\n}\n\nwindow.customElements.define('stb-topmenu', StbTopmenu);\n"],"names":["caseMap","dedupeId","root$0","camelToDashCase$0","get$0","isPath$0","matches","set$0","isPath","root","rootPath$0","resolveUrl$0"],"mappings":"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"}